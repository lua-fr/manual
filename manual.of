@Ci{$Id: manual.of,v 1.49 2009/02/16 19:58:58 roberto Exp roberto $}
@C{-------------------------------------------------------------------------}
@manual{

@sect1{@title{Introduction}

Lua is an extension programming language designed to support
general procedural programming with data description
facilities.
It also offers good support for object-oriented programming,
functional programming, and data-driven programming.
Lua is intended to be used as a powerful, light-weight
scripting language for any program that needs one.
Lua is implemented as a library, written in @emph{clean} C
(that is, in the common subset of @N{ANSI C} and C++).

Being an extension language, Lua has no notion of a @Q{main} program:
it only works @emph{embedded} in a host client,
called the @emph{embedding program} or simply the @emph{host}.
This host program can invoke functions to execute a piece of Lua code,
can write and read Lua variables,
and can register @N{C functions} to be called by Lua code.
Through the use of @N{C functions}, Lua can be augmented to cope with
a wide range of different domains,
thus creating customized programming languages sharing a syntactical framework.
The Lua distribution includes a sample host program called @id{lua},
which uses the Lua library to offer a complete, stand-alone Lua interpreter.

Lua is free software,
and is provided as usual with no guarantees,
as stated in its license.
The implementation described in this manual is available
at Lua's official web site, @id{www.lua.org}.

Like any other reference manual,
this document is dry in places.
For a discussion of the decisions behind the design of Lua,
see the technical papers available at Lua's web site.
For a detailed introduction to programming in Lua,
see Roberto's book, @emph{Programming in Lua (Second Edition)}.

}



@C{-------------------------------------------------------------------------}
@sect1{language| @title{The Language}

This section describes the lexis, the syntax, and the semantics of Lua.
In other words,
this section describes
which tokens are valid,
how they can be combined,
and what their combinations mean.

The language constructs will be explained using the usual extended BNF notation,
in which
@N{@bnfrep{@rep{a}} means 0} or more @rep{a}'s, and
@N{@bnfopt{@rep{a}} means} an optional @rep{a}.
Non-terminals are shown like @bnfNter{non-terminal},
keywords are shown like @Rw{kword},
and other terminal symbols are shown like @bnfter{=}.
The complete syntax of Lua can be found in @refsec{BNF}
at the end of this manual.

@sect2{lexical| @title{Lexical Conventions}

@def{Names}
(also called @def{identifiers})
in Lua can be any string of letters,
digits, and underscores,
not beginning with a digit.
This coincides with the definition of names in most languages.
(The definition of letter depends on the current locale:
any character considered alphabetic by the current locale
can be used in an identifier.)
Identifiers are used to name variables and table fields.

The following @def{keywords} are reserved
and cannot be used as names:
@index{reserved words}
@verbatim{
and       break     do        else      elseif
end       false     for       function  if
in        local     nil       not       or
repeat    return    then      true      until     while
}

Lua is a case-sensitive language:
@id{and} is a reserved word, but @id{And} and @id{AND}
are two different, valid names.
As a convention, names starting with an underscore followed by
uppercase letters (such as @Lid{_VERSION})
are reserved for internal global variables used by Lua.

The following strings denote other @x{tokens}:
@verbatim{
+     -     *     /     %     ^     #
==    ~=    <=    >=    <     >     =
(     )     {     }     [     ]
;     :     ,     .     ..    ...
}

@def{Literal strings}
can be delimited by matching single or double quotes,
and can contain the following C-like escape sequences:
@Char{\a} (bell),
@Char{\b} (backspace),
@Char{\f} (form feed),
@Char{\n} (newline),
@Char{\r} (carriage return),
@Char{\t} (horizontal tab),
@Char{\v} (vertical tab),
@Char{\\} (backslash),
@Char{\"} (quotation mark [double quote]),
and @Char{\'} (apostrophe [single quote]).
Moreover, a backslash followed by a real newline
results in a newline in the string.
A character in a string can also be specified by its numerical value
using the escape sequence @T{\@rep{ddd}},
where @rep{ddd} is a sequence of up to three decimal digits.
(Note that if a numerical escape is to be followed by a digit,
it must be expressed using exactly three digits.)
Strings in Lua can contain any 8-bit value, including embedded zeros,
which can be specified as @Char{\0}.

Literal strings can also be defined using a long format
enclosed by @def{long brackets}.
We define an @def{opening long bracket of level @rep{n}} as an opening
square bracket followed by @rep{n} equal signs followed by another
opening square bracket.
So, an opening long bracket of @N{level 0} is written as @T{[[},
an opening long bracket of @N{level 1} is written as @T{[=[},
and so on.
A @emph{closing long bracket} is defined similarly;
for instance, a closing long bracket of @N{level 4} is written as @T{]====]}.
A long string starts with an opening long bracket of any level and
ends at the first closing long bracket of the same level.
Literals in this bracketed form can run for several lines,
do not interpret any escape sequences,
and ignore long brackets of any other level.
They can contain anything except a closing bracket of the proper level.

For convenience,
when the opening long bracket is immediately followed by a newline,
the newline is not included in the string.
As an example, in a system using ASCII
(in which @Char{a} is coded @N{as 97},
newline is coded @N{as 10}, and @Char{1} is coded @N{as 49}),
the five literal strings below denote the same string:
@verbatim{
a = 'alo\n123"'
a = "alo\n123\""
a = '\97lo\10\04923"'
a = [[alo
123"]]
a = [==[
alo
123"]==]
}

A @def{numerical constant} can be written with an optional decimal part
and an optional decimal exponent.
Lua also accepts integer @x{hexadecimal constants},
by prefixing them with @T{0x}.
Examples of valid numerical constants are
@verbatim{
3   3.0   3.1416   314.16e-2   0.31416E1   0xff   0x56
}

A @def{comment} starts with a double hyphen (@T{--})
anywhere outside a string.
If the text immediately after @T{--} is not an opening long bracket,
the comment is a @emph{short comment},
which runs until the end of the line.
Otherwise, it is a @emph{long comment},
which runs until the corresponding closing long bracket.
Long comments are frequently used to disable code temporarily.

}

@sect2{TypesSec| @title{Values and Types}

Lua is a @emph{dynamically typed language}.
This means that
variables do not have types; only values do.
There are no type definitions in the language.
All values carry their own type.

All values in Lua are @emph{first-class values}.
This means that all values can be stored in variables,
passed as arguments to other functions, and returned as results.

There are eight @x{basic types} in Lua:
@def{nil}, @def{boolean}, @def{number},
@def{string}, @def{function}, @def{userdata},
@def{thread}, and @def{table}.
@emph{Nil} is the type of the value @nil,
whose main property is to be different from any other value;
it usually represents the absence of a useful value.
@emph{Boolean} is the type of the values @false and @true.
Both @nil and @false make a condition false;
any other value makes it true.
@emph{Number} represents real (double-precision floating-point) numbers.
(It is easy to build Lua interpreters that use other
internal representations for numbers,
such as single-precision float or long integers;
see file @id{luaconf.h}.)
@emph{String} represents arrays of characters.
@index{eight-bit clean}
Lua is 8-bit clean:
strings can contain any 8-bit character,
including embedded zeros (@Char{\0}) @see{lexical}.

Lua can call (and manipulate) functions written in Lua and
functions written in C
@see{functioncall}.

The type @emph{userdata} is provided to allow arbitrary @N{C data} to
be stored in Lua variables.
This type corresponds to a block of raw memory
and has no pre-defined operations in Lua,
except assignment and identity test.
However, by using @emph{metatables},
the programmer can define operations for userdata values
@see{metatable}.
Userdata values cannot be created or modified in Lua,
only through the @N{C API}.
This guarantees the integrity of data owned by the host program.

The type @def{thread} represents independent threads of execution
and it is used to implement coroutines @see{coroutine}.
Do not confuse Lua threads with operating-system threads.
Lua supports coroutines on all systems,
even those that do not support threads.

The type @emph{table} implements @x{associative arrays},
that is, @x{arrays} that can be indexed not only with numbers,
but with any value (except @nil).
Tables can be @emph{heterogeneous};
that is, they can contain values of all types (except @nil).
Tables are the sole data structuring mechanism in Lua;
they can be used to represent ordinary arrays,
symbol tables, sets, records, graphs, trees, etc.
To represent @x{records}, Lua uses the field name as an index.
The language supports this representation by
providing @id{a.name} as syntactic sugar for @T{a["name"]}.
There are several convenient ways to create tables in Lua
@see{tableconstructor}.

Like indices,
the value of a table field can be of any type (except @nil).
In particular,
because functions are first-class values,
table fields can contain functions.
Thus tables can also carry @emph{methods} @see{func-def}.

Tables, functions, threads, and (full) userdata values are @emph{objects}:
variables do not actually @emph{contain} these values,
only @emph{references} to them.
Assignment, parameter passing, and function returns
always manipulate references to such values;
these operations do not imply any kind of copy.

The library function @Lid{type} returns a string describing the type
of a given value.


@sect3{coercion| @title{Coercion}

Lua provides automatic conversion between
string and number values at run time.
Any arithmetic operation applied to a string tries to convert
this string to a number, following the usual conversion rules.
Conversely, whenever a number is used where a string is expected,
the number is converted to a string, in a reasonable format.
For complete control over how numbers are converted to strings,
use the @id{format} function from the string library
@seeF{string.format}.

}

}

@sect2{variables| @title{Variables}

Variables are places that store values.
@C{In Lua, variables are given by simple identifiers or by table fields.}
There are three kinds of variables in Lua:
global variables, local variables, and table fields.

A single name can denote a global variable or a local variable
(or a function's formal parameter,
which is a particular kind of local variable):
@Produc{
@producname{var}@producbody{@bnfNter{Name}}
}
@bnfNter{Name} denotes identifiers, as defined in @See{lexical}.

Any variable is assumed to be global unless explicitly declared
as a local @see{localvar}.
@x{Local variables} are @emph{lexically scoped}:
local variables can be freely accessed by functions
defined inside their scope @see{visibility}.

Before the first assignment to a variable, its value is @nil.

Square brackets are used to index a table:
@Produc{
@producname{var}@producbody{prefixexp @bnfter{[} exp @bnfter{]}}
}
The meaning of accesses to global variables 
and table fields can be changed via metatables.
An access to an indexed variable @T{t[i]} is equivalent to
a call @T{gettable_event(t,i)}.
(See @See{metatable} for a complete description of the
@id{gettable_event} function.
This function is not defined or callable in Lua.
We use it here only for explanatory purposes.)

The syntax @id{var.Name} is just syntactic sugar for
@T{var["Name"]}:
@Produc{
@producname{var}@producbody{prefixexp @bnfter{.} @bnfNter{Name}}
}

All global variables live as fields in ordinary Lua tables,
called @def{environment tables} or simply
@emph{environments} @see{environ}.
Each function has its own reference to an environment,
so that all global variables in this function
will refer to this environment table.
When a function is created,
it inherits the environment from the function that created it.
To get the environment table of a Lua function,
you call @Lid{getfenv}.
To replace it,
you call @Lid{setfenv}.
(You can only manipulate the environment of @N{C functions}
through the debug library; @see{libdebug}.)

An access to a global variable @id{x}
is equivalent to @id{_env.x},
which in turn is equivalent to
@verbatim{
gettable_event(_env, "x")
}
where @id{_env} is the environment of the running function.
(See @See{metatable} for a complete description of the
@id{gettable_event} function.
This function is not defined or callable in Lua.
Similarly, the @id{_env} variable is not defined in Lua.
We use them here only for explanatory purposes.)

}

@sect2{stats| @title{Statements}

Lua supports an almost conventional set of @x{statements},
similar to those in Pascal or C.
This set includes
assignments, control structures, function calls,
and variable declarations.

@sect3{chunks| @title{Chunks}

The unit of execution of Lua is called a @def{chunk}.
A chunk is simply a sequence of statements,
which are executed sequentially.
Each statement can be optionally followed by a semicolon:
@Produc{
@producname{chunk}@producbody{@bnfrep{stat @bnfopt{@bnfter{;}}}}
}
There are no empty statements and thus @Char{;;} is not legal.

Lua handles a chunk as the body of an anonymous function 
with a variable number of arguments
@see{func-def}.
As such, chunks can define local variables,
receive arguments, and return values.

A chunk can be stored in a file or in a string inside the host program.
To execute a chunk,
Lua first pre-compiles the chunk into instructions for a virtual machine,
and then it executes the compiled code
with an interpreter for the virtual machine.

Chunks can also be pre-compiled into binary form;
see program @idx{luac} for details.
Programs in source and compiled forms are interchangeable;
Lua automatically detects the file type and acts accordingly.
@index{pre-compilation}

}

@sect3{@title{Blocks}
A @x{block} is a list of statements;
syntactically, a block is the same as a chunk:
@Produc{
@producname{block}@producbody{chunk}
}

A block can be explicitly delimited to produce a single statement:
@Produc{
@producname{stat}@producbody{@Rw{do} block @Rw{end}}
}
Explicit blocks are useful
to control the scope of variable declarations.
Explicit blocks are also sometimes used to
add a @Rw{return} or @Rw{break} statement in the middle
of another block @see{control}.

}

@sect3{assignment| @title{Assignment}

Lua allows @x{multiple assignments}.
Therefore, the syntax for assignment
defines a list of variables on the left side
and a list of expressions on the right side.
The elements in both lists are separated by commas:
@Produc{
@producname{stat}@producbody{varlist @bnfter{=} explist}
@producname{varlist}@producbody{var @bnfrep{@bnfter{,} var}}
@producname{explist}@producbody{exp @bnfrep{@bnfter{,} exp}}
}
Expressions are discussed in @See{expressions}.

Before the assignment,
the list of values is @emph{adjusted} to the length of
the list of variables.@index{adjustment}
If there are more values than needed,
the excess values are thrown away.
If there are fewer values than needed,
the list is extended with as many  @nil's as needed.
If the list of expressions ends with a function call,
then all values returned by that call enter the list of values,
before the adjustment
(except when the call is enclosed in parentheses; see @See{expressions}).

The assignment statement first evaluates all its expressions
and only then are the assignments performed.
Thus the code
@verbatim{
i = 3
i, a[i] = i+1, 20
}
sets @T{a[3]} to 20, without affecting @T{a[4]}
because the @id{i} in @T{a[i]} is evaluated (to 3)
before it is @N{assigned 4}.
Similarly, the line
@verbatim{
x, y = y, x
}
exchanges the values of @id{x} and @id{y},
and
@verbatim{
x, y, z = y, z, x
}
cyclically permutes the values of @id{x}, @id{y}, and @id{z}.

The meaning of assignments to global variables
and table fields can be changed via metatables.
An assignment to an indexed variable @T{t[i] = val} is equivalent to
@T{settable_event(t,i,val)}.
(See @See{metatable} for a complete description of the
@id{settable_event} function.
This function is not defined or callable in Lua.
We use it here only for explanatory purposes.)

An assignment to a global variable @T{x = val}
is equivalent to the assignment
@T{_env.x = val},
which in turn is equivalent to
@verbatim{
settable_event(_env, "x", val)
}
where @id{_env} is the environment of the running function.
(The @id{_env} variable is not defined in Lua.
We use it here only for explanatory purposes.)

}

@sect3{control| @title{Control Structures}
The control structures
@Rw{if}, @Rw{while}, and @Rw{repeat} have the usual meaning and
familiar syntax:
@index{while-do statement}
@index{repeat-until statement}
@index{if-then-else statement}
@Produc{
@producname{stat}@producbody{@Rw{while} exp @Rw{do} block @Rw{end}}
@producname{stat}@producbody{@Rw{repeat} block @Rw{until} exp}
@producname{stat}@producbody{@Rw{if} exp @Rw{then} block
  @bnfrep{@Rw{elseif} exp @Rw{then} block}
   @bnfopt{@Rw{else} block} @Rw{end}}
}
Lua also has a @Rw{for} statement, in two flavors @see{for}.

The @x{condition expression} of a
control structure can return any value.
Both @false and @nil are considered false.
All values different from @nil and @false are considered true
(in particular, the number 0 and the empty string are also true).

In the @Rw{repeat}@En@Rw{until} loop,
the inner block does not end at the @Rw{until} keyword,
but only after the condition.
So, the condition can refer to local variables
declared inside the loop block.

The @Rw{return} statement is used to return values
from a function or a chunk (which is just a function).
@index{return statement}
Functions and chunks can return more than one value,
and so the syntax for the @Rw{return} statement is
@Produc{
@producname{stat}@producbody{@Rw{return} @bnfopt{explist}}
}

The @Rw{break} statement is used to terminate the execution of a
@Rw{while}, @Rw{repeat}, or @Rw{for} loop,
skipping to the next statement after the loop:
@index{break statement}
@Produc{
@producname{stat}@producbody{@Rw{break}}
}
A @Rw{break} ends the innermost enclosing loop.

The @Rw{return} and @Rw{break}
statements can only be written as the @emph{last} statement of a block.
If it is really necessary to @Rw{return} or @Rw{break} in the
middle of a block,
then an explicit inner block can be used,
as in the idioms
@T{do return end} and @T{do break end},
because now @Rw{return} and @Rw{break} are the last statements in
their (inner) blocks.

}

@sect3{for| @title{For Statement}

@index{for statement}
The @Rw{for} statement has two forms:
one numeric and one generic.

The numeric @Rw{for} loop repeats a block of code while a
control variable runs through an arithmetic progression.
It has the following syntax:
@Produc{
@producname{stat}@producbody{@Rw{for} @bnfNter{Name} @bnfter{=} exp @bnfter{,} exp @bnfopt{@bnfter{,} exp}
                    @Rw{do} block @Rw{end}}
}
The @emph{block} is repeated for @emph{name} starting at the value of
the first @emph{exp}, until it passes the second @emph{exp} by steps of the
third @emph{exp}.
More precisely, a @Rw{for} statement like
@verbatim{
for v = @rep{e1}, @rep{e2}, @rep{e3} do @rep{block} end
}
is equivalent to the code:
@verbatim{
do
  local @rep{var}, @rep{limit}, @rep{step} = tonumber(@rep{e1}), tonumber(@rep{e2}), tonumber(@rep{e3})
  if not (@rep{var} and @rep{limit} and @rep{step}) then error() end
  while (@rep{step} > 0 and @rep{var} <= @rep{limit}) or (@rep{step} <= 0 and @rep{var} >= @rep{limit}) do
    local v = @rep{var}
    @rep{block}
    @rep{var} = @rep{var} + @rep{step}
  end
end
}
Note the following:
@itemize{

@item{
All three control expressions are evaluated only once,
before the loop starts.
They must all result in numbers.
}

@item{
@T{@rep{var}}, @T{@rep{limit}}, and @T{@rep{step}} are invisible variables.
The names shown here are for explanatory purposes only.
}

@item{
If the third expression (the step) is absent,
then a step @N{of 1} is used.
}

@item{
You can use @Rw{break} to exit a @Rw{for} loop.
}

@item{
The loop variable @T{v} is local to the loop;
you cannot use its value after the @Rw{for} ends or is broken.
If you need this value,
assign it to another variable before breaking or exiting the loop.
}

}

The generic @Rw{for} statement works over functions,
called @def{iterators}.
On each iteration, the iterator function is called to produce a new value,
stopping when this new value is @nil.
The generic @Rw{for} loop has the following syntax:
@Produc{
@producname{stat}@producbody{@Rw{for} namelist @Rw{in} explist
                    @Rw{do} block @Rw{end}}
@producname{namelist}@producbody{@bnfNter{Name} @bnfrep{@bnfter{,} @bnfNter{Name}}}
}
A @Rw{for} statement like
@verbatim{
for @rep{var_1}, @Cdots, @rep{var_n} in @rep{explist} do @rep{block} end
}
is equivalent to the code:
@verbatim{
do
  local @rep{f}, @rep{s}, @rep{var} = @rep{explist}
  while true do
    local @rep{var_1}, @Cdots, @rep{var_n} = @rep{f}(@rep{s}, @rep{var})
    @rep{var} = @rep{var_1}
    if @rep{var} == nil then break end
    @rep{block}
  end
end
}
Note the following:
@itemize{

@item{
@T{@rep{explist}} is evaluated only once.
Its results are an @emph{iterator} function,
a @emph{state},
and an initial value for the first @emph{iterator variable}.
}

@item{
@T{@rep{f}}, @T{@rep{s}}, and @T{@rep{var}} are invisible variables.
The names are here for explanatory purposes only.
}

@item{
You can use @Rw{break} to exit a @Rw{for} loop.
}

@item{
The loop variables @T{@rep{var_i}} are local to the loop;
you cannot use their values after the @Rw{for} ends.
If you need these values,
then assign them to other variables before breaking or exiting the loop.
}

}

}

@sect3{funcstat| @title{Function Calls as Statements}
To allow possible side-effects,
function calls can be executed as statements:
@Produc{
@producname{stat}@producbody{functioncall}
}
In this case, all returned values are thrown away.
Function calls are explained in @See{functioncall}.

}

@sect3{localvar| @title{Local Declarations}
@x{Local variables} can be declared anywhere inside a block.
The declaration can include an initial assignment:
@Produc{
@producname{stat}@producbody{@Rw{local} namelist @bnfopt{@bnfter{=} explist}}
}
If present, an initial assignment has the same semantics
of a multiple assignment @see{assignment}.
Otherwise, all variables are initialized with @nil.

A chunk is also a block @see{chunks},
and so local variables can be declared in a chunk outside any explicit block.
The scope of such local variables extends until the end of the chunk.

The visibility rules for local variables are explained in @See{visibility}.

}

}

@sect2{expressions| @title{Expressions}

The basic expressions in Lua are the following:
@Produc{
@producname{exp}@producbody{prefixexp}
@producname{exp}@producbody{@Rw{nil} @Or @Rw{false} @Or @Rw{true}}
@producname{exp}@producbody{@bnfNter{Number}}
@producname{exp}@producbody{@bnfNter{String}}
@producname{exp}@producbody{function}
@producname{exp}@producbody{tableconstructor}
@producname{exp}@producbody{@bnfter{...}}
@producname{exp}@producbody{exp binop exp}
@producname{exp}@producbody{unop exp}
@producname{prefixexp}@producbody{var @Or functioncall @Or
                                  @bnfter{(} exp @bnfter{)}}
}

Numbers and literal strings are explained in @See{lexical};
variables are explained in @See{variables};
function definitions are explained in @See{func-def};
function calls are explained in @See{functioncall};
table constructors are explained in @See{tableconstructor}.
Vararg expressions,
denoted by three dots (@Char{...}), can only be used when
directly inside a vararg function;
they are explained in @See{func-def}.

Binary operators comprise arithmetic operators @see{arith},
relational operators @see{rel-ops}, logical operators @see{logic},
and the concatenation operator @see{concat}.
Unary operators comprise the unary minus @see{arith},
the unary @Rw{not} @see{logic},
and the unary @def{length operator} @see{len-op}.

Both function calls and vararg expressions can result in multiple values.
If an expression is used as a statement
(only possible for function calls @see{funcstat}),
then its return list is adjusted to zero elements,
thus discarding all returned values.
If an expression is used as the last (or the only) element
of a list of expressions,
then no adjustment is made
(unless the call is enclosed in parentheses).
In all other contexts,
Lua adjusts the result list to one element,
discarding all values except the first one.

Here are some examples:
@verbatim{
f()                -- adjusted to 0 results
g(f(), x)          -- f() is adjusted to 1 result
g(x, f())          -- g gets x plus all results from f()
a,b,c = f(), x     -- f() is adjusted to 1 result (c gets nil)
a,b = ...          -- a gets the first vararg parameter, b gets
                   -- the second (both a and b can get nil if there
                   -- is no corresponding vararg parameter)

a,b,c = x, f()     -- f() is adjusted to 2 results
a,b,c = f()        -- f() is adjusted to 3 results
return f()         -- returns all results from f()
return ...         -- returns all received vararg parameters
return x,y,f()     -- returns x, y, and all results from f()
{f()}              -- creates a list with all results from f()
{...}              -- creates a list with all vararg parameters
{f(), nil}         -- f() is adjusted to 1 result
}

Any expression enclosed in parentheses always results in only one value.
Thus,
@T{(f(x,y,z))} is always a single value,
even if @id{f} returns several values.
(The value of @T{(f(x,y,z))} is the first value returned by @id{f}
or @nil if @id{f} does not return any values.)



@sect3{arith| @title{Arithmetic Operators}
Lua supports the usual @x{arithmetic operators}:
the binary @T{+} (addition),
@T{-} (subtraction), @T{*} (multiplication),
@T{/} (division), @T{%} (modulo), and @T{^} (exponentiation);
and unary @T{-} (negation).
If the operands are numbers, or strings that can be converted to
numbers @see{coercion},
then all operations have the usual meaning.
Exponentiation works for any exponent.
For instance, @T{x^(-0.5)} computes the inverse of the square root of @id{x}.
Modulo is defined as
@verbatim{
a % b == a - math.floor(a/b)*b
}
That is, it is the remainder of a division that rounds
the quotient towards minus infinity.

}

@sect3{rel-ops| @title{Relational Operators}
The @x{relational operators} in Lua are
@verbatim{
==    ~=    <     >     <=    >=
}
These operators always result in @false or @true.

Equality (@T{==}) first compares the type of its operands.
If the types are different, then the result is @false.
Otherwise, the values of the operands are compared.
Numbers and strings are compared in the usual way.
Objects (tables, userdata, threads, and functions)
are compared by @emph{reference}:
two objects are considered equal only if they are the @emph{same} object.
Every time you create a new object
(a table, userdata, thread, or function),
this new object is different from any previously existing object.

You can change the way that Lua compares tables and userdata 
by using the @Q{eq} metamethod @see{metatable}.

The conversion rules of @See{coercion}
@emph{do not} apply to equality comparisons.
Thus, @T{"0"==0} evaluates to @false,
and @T{t[0]} and @T{t["0"]} denote different
entries in a table.

The operator @T{~=} is exactly the negation of equality (@T{==}).

The order operators work as follows.
If both arguments are numbers, then they are compared as such.
Otherwise, if both arguments are strings,
then their values are compared according to the current locale.
Otherwise, Lua tries to call the @Q{lt} or the @Q{le}
metamethod @see{metatable}.
A comparison @T{a > b} is translated to @T{b < a}
and @T{a >= b} is translated to @T{b <= a}.

}

@sect3{logic| @title{Logical Operators}
The @x{logical operators} in Lua are
@Rw{and}, @Rw{or}, and @Rw{not}.
Like the control structures @see{control},
all logical operators consider both @false and @nil as false
and anything else as true.

The negation operator @Rw{not} always returns @false or @true.
The conjunction operator @Rw{and} returns its first argument
if this value is @false or @nil;
otherwise, @Rw{and} returns its second argument.
The disjunction operator @Rw{or} returns its first argument
if this value is different from @nil and @false;
otherwise, @Rw{or} returns its second argument.
Both @Rw{and} and @Rw{or} use @x{short-cut evaluation};
that is,
the second operand is evaluated only if necessary.
Here are some examples:
@verbatim{
10 or 20            --> 10
10 or error()       --> 10
nil or "a"          --> "a"
nil and 10          --> nil
false and error()   --> false
false and nil       --> false
false or nil        --> nil
10 and 20           --> 20
}
(In this manual,
@T{-->} indicates the result of the preceding expression.)

}

@sect3{concat| @title{Concatenation}
The string @x{concatenation} operator in Lua is
denoted by two dots (@Char{..}).
If both operands are strings or numbers, then they are converted to
strings according to the rules mentioned in @See{coercion}.
Otherwise, the @Q{concat} metamethod is called @see{metatable}.

}

@sect3{len-op| @title{The Length Operator}

The length operator is denoted by the unary operator @T{#}.
The length of a string is its number of bytes
(that is, the usual meaning of string length when each
character is one byte).

The length of a table @id{t} is defined to be any
integer index @id{n}
such that @T{t[n]} is not @nil and @T{t[n+1]} is @nil;
moreover, if @T{t[1]} is @nil, @id{n} can be zero.
For a regular array, with non-nil values from 1 to a given @id{n},
its length is exactly that @id{n},
the index of its last value.
If the array has @Q{holes}
(that is, @nil values between other non-nil values),
then @T{#t} can be any of the indices that
directly precedes a @nil value
(that is, it may consider any such @nil value as the end of
the array). 

}

@sect3{@title{Precedence}
@x{Operator precedence} in Lua follows the table below,
from lower to higher priority:
@verbatim{
or
and
<     >     <=    >=    ~=    ==
..
+     -
*     /     %
not   #     - (unary)
^
}
As usual,
you can use parentheses to change the precedences of an expression.
The concatenation (@Char{..}) and exponentiation (@Char{^})
operators are right associative.
All other binary operators are left associative.

}

@sect3{tableconstructor| @title{Table Constructors}
Table @x{constructors} are expressions that create tables.
Every time a constructor is evaluated, a new table is created.
A constructor can be used to create an empty table
or to create a table and initialize some of its fields.
The general syntax for constructors is
@Produc{
@producname{tableconstructor}@producbody{@bnfter{@Open} @bnfopt{fieldlist} @bnfter{@Close}}
@producname{fieldlist}@producbody{field @bnfrep{fieldsep field} @bnfopt{fieldsep}}
@producname{field}@producbody{@bnfter{[} exp @bnfter{]} @bnfter{=} exp @Or
               @bnfNter{Name} @bnfter{=} exp @Or exp}
@producname{fieldsep}@producbody{@bnfter{,} @Or @bnfter{;}}
}

Each field of the form @T{[exp1] = exp2} adds to the new table an entry
with key @id{exp1} and value @id{exp2}.
A field of the form @T{name = exp} is equivalent to
@T{["name"] = exp}.
Finally, fields of the form @id{exp} are equivalent to
@T{[i] = exp}, where @id{i} are consecutive numerical integers,
starting with 1.
Fields in the other formats do not affect this counting.
For example,
@verbatim{
a = { [f(1)] = g; "x", "y"; x = 1, f(x), [30] = 23; 45 }
}
is equivalent to
@verbatim{
do
  local t = {}
  t[f(1)] = g
  t[1] = "x"         -- 1st exp
  t[2] = "y"         -- 2nd exp
  t.x = 1            -- t["x"] = 1
  t[3] = f(x)        -- 3rd exp
  t[30] = 23
  t[4] = 45          -- 4th exp
  a = t
end
}

If the last field in the list has the form @id{exp}
and the expression is a function call or a vararg expression,
then all values returned by this expression enter the list consecutively
@see{functioncall}.
To avoid this,
enclose the function call or the vararg expression
in parentheses @see{expressions}.

The field list can have an optional trailing separator,
as a convenience for machine-generated code.

}

@sect3{functioncall| @title{Function Calls}
A @x{function call} in Lua has the following syntax:
@Produc{
@producname{functioncall}@producbody{prefixexp args}
}
In a function call,
first @bnfNter{prefixexp} and @bnfNter{args} are evaluated.
If the value of @bnfNter{prefixexp} has type @emph{function},
then this function is called
with the given arguments.
Otherwise, the @bnfNter{prefixexp} @Q{call} metamethod is called,
having as first parameter the value of @bnfNter{prefixexp},
followed by the original call arguments
@see{metatable}.

The form
@Produc{
@producname{functioncall}@producbody{prefixexp @bnfter{:} @bnfNter{Name} args}
}
can be used to call @Q{methods}.
A call @T{v:name(@rep{args})}
is syntactic sugar for @T{v.name(v,@rep{args})},
except that @id{v} is evaluated only once.

Arguments have the following syntax:
@Produc{
@producname{args}@producbody{@bnfter{(} @bnfopt{explist} @bnfter{)}}
@producname{args}@producbody{tableconstructor}
@producname{args}@producbody{@bnfNter{String}}
}
All argument expressions are evaluated before the call.
A call of the form @T{f{@rep{fields}}} is
syntactic sugar for @T{f({@rep{fields}})};
that is, the argument list is a single new table.
A call of the form @T{f'@rep{string}'}
(or @T{f"@rep{string}"} or @T{f[[@rep{string}]]})
is syntactic sugar for @T{f('@rep{string}')};
that is, the argument list is a single literal string.

As an exception to the free-format syntax of Lua,
you cannot put a line break before the @Char{(} in a function call.
This restriction avoids some ambiguities in the language.
If you write
@verbatim{
a = f
(g).x(a)
}
Lua would see that as a single statement, @T{a = f(g).x(a)}.
So, if you want two statements, you must add a semi-colon between them.
If you actually want to call @id{f},
you must remove the line break before @T{(g)}.

A call of the form @id{return} @emph{functioncall} is called
a @def{tail call}.
Lua implements @def{proper tail calls}
(or @emph{proper tail recursion}):
in a tail call,
the called function reuses the stack entry of the calling function.
Therefore, there is no limit on the number of nested tail calls that
a program can execute.
However, a tail call erases any debug information about the
calling function.
Note that a tail call only happens with a particular syntax,
where the @Rw{return} has one single function call as argument;
this syntax makes the calling function return exactly
the returns of the called function.
So, none of the following examples are tail calls:
@verbatim{
return (f(x))        -- results adjusted to 1
return 2 * f(x)
return x, f(x)       -- additional results
f(x); return         -- results discarded
return x or f(x)     -- results adjusted to 1
}

}

@sect3{func-def| @title{Function Definitions}

The syntax for function definition is
@Produc{
@producname{function}@producbody{@Rw{function} funcbody}
@producname{funcbody}@producbody{@bnfter{(} @bnfopt{parlist} @bnfter{)} block @Rw{end}}
}

The following syntactic sugar simplifies function definitions:
@Produc{
@producname{stat}@producbody{@Rw{function} funcname funcbody}
@producname{stat}@producbody{@Rw{local} @Rw{function} @bnfNter{Name} funcbody}
@producname{funcname}@producbody{@bnfNter{Name} @bnfrep{@bnfter{.} @bnfNter{Name}} @bnfopt{@bnfter{:} @bnfNter{Name}}}
}
The statement
@verbatim{
function f () @rep{body} end
}
translates to
@verbatim{
f = function () @rep{body} end
}
The statement
@verbatim{
function t.a.b.c.f () @rep{body} end
}
translates to
@verbatim{
t.a.b.c.f = function () @rep{body} end
}
The statement
@verbatim{
local function f () @rep{body} end
}
translates to
@verbatim{
local f; f = function () @rep{body} end
}
@emph{not} to
@verbatim{
local f = function () @rep{body} end
}
(This only makes a difference when the body of the function
contains references to @id{f}.)

A function definition is an executable expression,
whose value has type @emph{function}.
When Lua pre-compiles a chunk,
all its function bodies are pre-compiled too.
Then, whenever Lua executes the function definition,
the function is @emph{instantiated} (or @emph{closed}).
This function instance (or @emph{closure})
is the final value of the expression.
Different instances of the same function
can refer to different  external local variables
and can have different environment tables.

Parameters act as local variables that are
initialized with the argument values:
@Produc{
@producname{parlist}@producbody{namelist @bnfopt{@bnfter{,} @bnfter{...}} @Or
  @bnfter{...}}
}
When a function is called,
the list of @x{arguments} is adjusted to
the length of the list of parameters,
unless the function is a variadic or @def{vararg function},
which is
indicated by three dots (@Char{...}) at the end of its parameter list.
A vararg function does not adjust its argument list;
instead, it collects all extra arguments and supplies them
to the function through a @def{vararg expression},
which is also written as three dots.
The value of this expression is a list of all actual extra arguments,
similar to a function with multiple results.
If a vararg expression is used inside another expression
or in the middle of a list of expressions,
then its return list is adjusted to one element.
If the expression is used as the last element of a list of expressions,
then no adjustment is made
(unless that last expression is enclosed in parentheses).


As an example, consider the following definitions:
@verbatim{
function f(a, b) end
function g(a, b, ...) end
function r() return 1,2,3 end
}
Then, we have the following mapping from arguments to parameters and
to the vararg expression:
@verbatim{
CALL            PARAMETERS

f(3)             a=3, b=nil
f(3, 4)          a=3, b=4
f(3, 4, 5)       a=3, b=4
f(r(), 10)       a=1, b=10
f(r())           a=1, b=2

g(3)             a=3, b=nil, ... -->  (nothing)
g(3, 4)          a=3, b=4,   ... -->  (nothing)
g(3, 4, 5, 8)    a=3, b=4,   ... -->  5  8
g(5, r())        a=5, b=1,   ... -->  2  3
}

Results are returned using the @Rw{return} statement @see{control}.
If control reaches the end of a function
without encountering a @Rw{return} statement,
then the function returns with no results.

The @emph{colon} syntax
is used for defining @def{methods},
that is, functions that have an implicit extra parameter @idx{self}.
Thus, the statement
@verbatim{
function t.a.b.c:f (@rep{params}) @rep{body} end
}
is syntactic sugar for
@verbatim{
t.a.b.c.f = function (self, @rep{params}) @rep{body} end
}

}

}

@sect2{visibility| @title{Visibility Rules}

@index{visibility}
Lua is a lexically scoped language.
The scope of variables begins at the first statement @emph{after}
their declaration and lasts until the end of the innermost block that
includes the declaration.
Consider the following example:
@verbatim{
x = 10                -- global variable
do                    -- new block
  local x = x         -- new 'x', with value 10
  print(x)            --> 10
  x = x+1
  do                  -- another block
    local x = x+1     -- another 'x'
    print(x)          --> 12
  end
  print(x)            --> 11
end
print(x)              --> 10  (the global one)
}

Notice that, in a declaration like @T{local x = x},
the new @id{x} being declared is not in scope yet,
and so the second @id{x} refers to the outside variable.

Because of the @x{lexical scoping} rules,
local variables can be freely accessed by functions
defined inside their scope.
A local variable used by an inner function is called
an @def{upvalue}, or @emph{external local variable},
inside the inner function.

Notice that each execution of a @Rw{local} statement
defines new local variables.
Consider the following example:
@verbatim{
a = {}
local x = 20
for i=1,10 do
  local y = 0
  a[i] = function () y=y+1; return x+y end
end
}
The loop creates ten closures
(that is, ten instances of the anonymous function).
Each of these closures uses a different @id{y} variable,
while all of them share the same @id{x}.

}

@sect2{error| @title{Error Handling}

Because Lua is an embedded extension language,
all Lua actions start from @N{C code} in the host program
calling a function from the Lua library @seeC{lua_pcall}.
Whenever an error occurs during Lua compilation or execution,
control returns to C,
which can take appropriate measures
(such as printing an error message).

Lua code can explicitly generate an error by calling the
@Lid{error} function.
If you need to catch errors in Lua,
you can use the @Lid{pcall} function.

}

@sect2{metatable| @title{Metatables}

Every value in Lua can have a @emph{metatable}.
This @def{metatable} is an ordinary Lua table
that defines the behavior of the original value
under certain special operations.
You can change several aspects of the behavior
of operations over a value by setting specific fields in its metatable.
For instance, when a non-numeric value is the operand of an addition,
Lua checks for a function in the field @T{"__add"} in its metatable.
If it finds one,
Lua calls this function to perform the addition.

We call the keys in a metatable @def{events}
and the values @def{metamethods}.
In the previous example, the event is @T{"add"} 
and the metamethod is the function that performs the addition.

You can query the metatable of any value
through the @Lid{getmetatable} function.

You can replace the metatable of tables
through the @Lid{setmetatable}
function.
You cannot change the metatable of other types from Lua
(except by using the debug library);
you must use the @N{C API} for that.

Tables and full userdata have individual metatables
(although multiple tables and userdata can share their metatables).
Values of all other types share one single metatable per type;
that is, there is one single metatable for all numbers,
one for all strings, etc.

A metatable controls how an object behaves in arithmetic operations,
order comparisons, concatenation, length operation, and indexing.
A metatable also can define a function to be called when a userdata
is garbage collected.
For each of these operations Lua associates a specific key
called an @emph{event}.
When Lua performs one of these operations over a value,
it checks whether this value has a metatable with the corresponding event.
If so, the value associated with that key (the metamethod)
controls how Lua will perform the operation.

Metatables control the operations listed next.
Each operation is identified by its corresponding name.
The key for each operation is a string with its name prefixed by
two underscores, @Char{__};
for instance, the key for operation @Q{add} is the
string @T{"__add"}.
The semantics of these operations is better explained by a Lua function
describing how the interpreter executes the operation.

The code shown here in Lua is only illustrative;
the real behavior is hard coded in the interpreter
and it is much more efficient than this simulation.
All functions used in these descriptions
(@Lid{rawget}, @Lid{tonumber}, etc.)
are described in @See{predefined}.
In particular, to retrieve the metamethod of a given object,
we use the expression
@verbatim{
metatable(obj)[event]
}
This should be read as
@verbatim{
rawget(getmetatable(obj) or {}, event)
}
@format{/pagebreak}
That is, the access to a metamethod does not invoke other metamethods,
and the access to objects with no metatables does not fail
(it simply results in @nil).


@description{

@item{@Q{add}|
the @T{+} operation.
@Lidx{__add}

The function @T{getbinhandler} below defines how Lua chooses a handler
for a binary operation.
First, Lua tries the first operand.
If its type does not define a handler for the operation,
then Lua tries the second operand.
@verbatim{
function getbinhandler (op1, op2, event)
  return metatable(op1)[event] or metatable(op2)[event]
end
}
By using this function,
the behavior of the @T{op1 + op2} is
@verbatim{
function add_event (op1, op2)
  local o1, o2 = tonumber(op1), tonumber(op2)
  if o1 and o2 then  -- both operands are numeric?
    return o1 + o2   -- '+' here is the primitive 'add'
  else  -- at least one of the operands is not numeric
    local h = getbinhandler(op1, op2, "__add")
    if h then
      -- call the handler with both operands
      return (h(op1, op2))
    else  -- no handler available: default behavior
      error(@Cdots)
    end
  end
end
}
}

@item{@Q{sub}|
the @T{-} operation.
@Lidx{__sub}
Behavior similar to the @Q{add} operation.
}

@item{@Q{mul}|
the @T{*} operation.
@Lidx{__mul}
Behavior similar to the @Q{add} operation.
}

@item{@Q{div}|
the @T{/} operation.
@Lidx{__div}
Behavior similar to the @Q{add} operation.
}

@item{@Q{mod}|
the @T{%} operation.
@Lidx{__mod}
Behavior similar to the @Q{add} operation,
with the operation
@T{o1 - floor(o1/o2)*o2} as the primitive operation.
}

@item{@Q{pow}|
the @T{^} (exponentiation) operation.
@Lidx{__pow}
Behavior similar to the @Q{add} operation,
with the function @T{pow} (from the @N{C math} library)
as the primitive operation.
}

@item{@Q{unm}|
the unary @T{-} operation.
@Lidx{__unm}
@verbatim{
function unm_event (op)
  local o = tonumber(op)
  if o then  -- operand is numeric?
    return -o  -- '-' here is the primitive 'unm'
  else  -- the operand is not numeric.
    -- Try to get a handler from the operand
    local h = metatable(op).__unm
    if h then
      -- call the handler with the operand
      return (h(op))
    else  -- no handler available: default behavior
      error(@Cdots)
    end
  end
end
}
}


@item{@Q{concat}|
the @T{..} (concatenation) operation.
@Lidx{__concat}
@verbatim{
function concat_event (op1, op2)
  if (type(op1) == "string" or type(op1) == "number") and
     (type(op2) == "string" or type(op2) == "number") then
    return op1 .. op2  -- primitive string concatenation
  else
    local h = getbinhandler(op1, op2, "__concat")
    if h then
      return (h(op1, op2))
    else
      error(@Cdots)
    end
  end
end
}
}


@item{@Q{len}|
the @T{#} operation.
@Lidx{__len}
@verbatim{
function len_event (op)
  if type(op) == "string" then
    return strlen(op)         -- primitive string length
  elseif type(op) == "table" then
    return #op                -- primitive table length
  else
    local h = metatable(op).__len
    if h then
      -- call the handler with the operand
      return (h(op))
    else  -- no handler available: default behavior
      error(@Cdots)
    end
  end
end
}
See @See{len-op} for a description of the length of a table.
}


@item{@Q{eq}|
the @T{==} operation.
@Lidx{__eq}
The function @T{getcomphandler} defines how Lua chooses a metamethod
for comparison operators.
A metamethod only is selected when both objects
being compared have the same type
and the same metamethod for the selected operation.
@verbatim{
function getcomphandler (op1, op2, event)
  if type(op1) ~= type(op2) then return nil end
  local mm1 = metatable(op1)[event]
  local mm2 = metatable(op2)[event]
  if mm1 == mm2 then return mm1 else return nil end
end
}
The @Q{eq} event is defined as follows:
@verbatim{
function eq_event (op1, op2)
  if type(op1) ~= type(op2) then  -- different types?
    return false   -- different objects
  end
  if op1 == op2 then   -- primitive equal?
    return true   -- objects are equal
  end
  -- try metamethod
  local h = getcomphandler(op1, op2, "__eq")
  if h then
    return (h(op1, op2))
  else
    return false
  end
end
}
@T{a ~= b} is equivalent to @T{not (a == b)}.
}

@item{@Q{lt}|
the @T{<} operation.
@Lidx{__lt}
@verbatim{
function lt_event (op1, op2)
  if type(op1) == "number" and type(op2) == "number" then
    return op1 < op2   -- numeric comparison
  elseif type(op1) == "string" and type(op2) == "string" then
    return op1 < op2   -- lexicographic comparison
  else
    local h = getcomphandler(op1, op2, "__lt")
    if h then
      return (h(op1, op2))
    else
      error(@Cdots)
    end
  end
end
}
@T{a > b} is equivalent to @T{b < a}.
}

@item{@Q{le}|
the @T{<=} operation.
@Lidx{__lt}
@verbatim{
function le_event (op1, op2)
  if type(op1) == "number" and type(op2) == "number" then
    return op1 <= op2   -- numeric comparison
  elseif type(op1) == "string" and type(op2) == "string" then
    return op1 <= op2   -- lexicographic comparison
  else
    local h = getcomphandler(op1, op2, "__le")
    if h then
      return (h(op1, op2))
    else
      h = getcomphandler(op1, op2, "__lt")
      if h then
        return not h(op2, op1)
      else
        error(@Cdots)
      end
    end
  end
end
}
@T{a >= b} is equivalent to @T{b <= a}.
Note that, in the absence of a @Q{le} metamethod,
Lua tries the @Q{lt}, assuming that @T{a <= b} is
equivalent to @T{not (b < a)}.
}

@item{@Q{index}|
The indexing access @T{table[key]}.
@Lidx{__index}
@verbatim{
function gettable_event (table, key)
  local h
  if type(table) == "table" then
    local v = rawget(table, key)
    if v ~= nil then return v end
    h = metatable(table).__index
    if h == nil then return nil end
  else
    h = metatable(table).__index
    if h == nil then
      error(@Cdots)
    end
  end
  if type(h) == "function" then
    return (h(table, key))     -- call the handler
  else return h[key]           -- or repeat operation on it
  end
end
}
}

@item{@Q{newindex}|
The indexing assignment @T{table[key] = value}.
@Lidx{__newindex}
@verbatim{
function settable_event (table, key, value)
  local h
  if type(table) == "table" then
    local v = rawget(table, key)
    if v ~= nil then rawset(table, key, value); return end
    h = metatable(table).__newindex
    if h == nil then rawset(table, key, value); return end
  else
    h = metatable(table).__newindex
    if h == nil then
      error(@Cdots)
    end
  end
  if type(h) == "function" then
    h(table, key,value)           -- call the handler
  else h[key] = value             -- or repeat operation on it
  end
end
}
}

@item{@Q{call}|
called when Lua calls a value.
@Lidx{__call}
@verbatim{
function function_event (func, ...)
  if type(func) == "function" then
    return func(...)   -- primitive call
  else
    local h = metatable(func).__call
    if h then
      return h(func, ...)
    else
      error(@Cdots)
    end
  end
end
}
}

}

}

@sect2{environ| @title{Environments}

Besides metatables,
objects of types thread, function, and userdata
have another table associated with them,
called their @def{environment}.
Like metatables, environments are regular tables and
multiple objects can share the same environment.

Threads are created sharing the environment of the creating thread.
Userdata and @N{C functions} are created sharing the environment
of the creating @N{C function}.
Non-nested Lua functions
(created by @Lid{loadfile}, @Lid{loadstring} or @Lid{load})
are created sharing the environment of the creating thread.
Nested Lua functions are created sharing the environment of
the creating Lua function.

Environments associated with userdata have no meaning for Lua.
It is only a convenience feature for programmers to associate a table to
a userdata.

Environments associated with threads are called
@def{global environments}.
They are used as the default environment for threads and
non-nested Lua functions created by the thread
and can be directly accessed by @N{C code} @see{pseudo-index}.

The environment associated with a @N{C function} can be directly
accessed by @N{C code} @see{pseudo-index}.
It is used as the default environment for other @N{C functions}
and userdata created by the function.

Environments associated with Lua functions are used to resolve
all accesses to global variables within the function @see{variables}.
They are used as the default environment for nested Lua functions
created by the function.

You can change the environment of a Lua function or the
running thread by calling @Lid{setfenv}.
You can get the environment of a Lua function or the running thread
by calling @Lid{getfenv}.
To manipulate the environment of other objects
(userdata, @N{C functions}, other threads) you must
use the @N{C API}.

}

@sect2{GC| @title{Garbage Collection}

Lua performs automatic memory management.
This means that
you have to worry neither about allocating memory for new objects
nor about freeing it when the objects are no longer needed.
Lua manages memory automatically by running
a @def{garbage collector} from time to time
to collect all @emph{dead objects}
(that is, objects that are no longer accessible from Lua).
All memory used by Lua is subject to automatic management:
tables, userdata, functions, threads, strings, etc.

Lua implements an incremental mark-and-sweep collector.
It uses two numbers to control its garbage-collection cycles:
the @def{garbage-collector pause} and
the @def{garbage-collector step multiplier}.
Both use percentage points as units
(so that a value of 100 means an internal value of 1).

The garbage-collector pause
controls how long the collector waits before starting a new cycle.
Larger values make the collector less aggressive.
Values smaller than 100 mean the collector will not wait to
start a new cycle.
A value of 200 means that the collector waits for the total memory in use
to double before starting a new cycle.

The step multiplier
controls the relative speed of the collector relative to
memory allocation.
Larger values make the collector more aggressive but also increase
the size of each incremental step.
Values smaller than 100 make the collector too slow and
can result in the collector never finishing a cycle.
The default, 200, means that the collector runs at @Q{twice}
the speed of memory allocation.

You can change these numbers by calling @Lid{lua_gc} in C
or @Lid{collectgarbage} in Lua.
With these functions you can also control 
the collector directly (e.g., stop and restart it).


@sect3{@title{Garbage-Collection Metamethods}

Using the @N{C API},
you can set garbage-collector metamethods for userdata @see{metatable}.
These metamethods are also called @def{finalizers}.
Finalizers allow you to coordinate Lua's garbage collection
with external resource management
(such as closing files, network or database connections,
or freeing your own memory).

Garbage userdata with a field @id{__gc} in their metatables are not
collected immediately by the garbage collector.
Instead, Lua puts them in a list.
After the collection,
Lua does the equivalent of the following function
for each userdata in that list:
@verbatim{
function gc_event (udata)
  local h = metatable(udata).__gc
  if h then
    h(udata)
  end
end
}

At the end of each garbage-collection cycle,
the finalizers for userdata are called in @emph{reverse}
order of their creation,
among those collected in that cycle.
That is, the first finalizer to be called is the one associated
with the userdata created last in the program.
The userdata itself is freed only in the next garbage-collection cycle.

}

@sect3{weak-table| @title{Weak Tables}

A @def{weak table} is a table whose elements are
@def{weak references}.
A weak reference is ignored by the garbage collector.
In other words,
if the only references to an object are weak references,
then the garbage collector will collect this object.

A weak table can have weak keys, weak values, or both.
A table with weak keys allows the collection of its keys,
but prevents the collection of its values.
A table with both weak keys and weak values allows the collection of
both keys and values.
In any case, if either the key or the value is collected,
the whole pair is removed from the table.
The weakness of a table is controlled by the
@id{__mode} field of its metatable.
If the @id{__mode} field is a string containing the @N{character @Char{k}},
the keys in the table are weak.
If @id{__mode} contains @Char{v},
the values in the table are weak.

After you use a table as a metatable,
you should not change the value of its @id{__mode} field.
Otherwise, the weak behavior of the tables controlled by this
metatable is undefined.

}

}

@sect2{coroutine| @title{Coroutines}

Lua supports coroutines,
also called @emph{collaborative multithreading}.
A coroutine in Lua represents an independent thread of execution.
Unlike threads in multithread systems, however,
a coroutine only suspends its execution by explicitly calling
a yield function.

You create a coroutine with a call to @Lid{coroutine.create}.
Its sole argument is a function
that is the main function of the coroutine.
The @id{create} function only creates a new coroutine and
returns a handle to it (an object of type @emph{thread});
it does not start the coroutine execution.

When you first call @Lid{coroutine.resume},
passing as its first argument
a thread returned by @Lid{coroutine.create},
the coroutine starts its execution,
at the first line of its main function.
Extra arguments passed to @Lid{coroutine.resume} are passed on
to the coroutine main function.
After the coroutine starts running,
it runs until it terminates or @emph{yields}.

A coroutine can terminate its execution in two ways:
normally, when its main function returns
(explicitly or implicitly, after the last instruction);
and abnormally, if there is an unprotected error.
In the first case, @Lid{coroutine.resume} returns @true,
plus any values returned by the coroutine main function.
In case of errors, @Lid{coroutine.resume} returns @false
plus an error message.

A coroutine yields by calling @Lid{coroutine.yield}.
When a coroutine yields,
the corresponding @Lid{coroutine.resume} returns immediately,
even if the yield happens inside nested function calls
(that is, not in the main function,
but in a function directly or indirectly called by the main function).
In the case of a yield, @Lid{coroutine.resume} also returns @true,
plus any values passed to @Lid{coroutine.yield}.
The next time you resume the same coroutine,
it continues its execution from the point where it yielded,
with the call to @Lid{coroutine.yield} returning any extra
arguments passed to @Lid{coroutine.resume}.

Like @Lid{coroutine.create},
the @Lid{coroutine.wrap} function also creates a coroutine,
but instead of returning the coroutine itself,
it returns a function that, when called, resumes the coroutine.
Any arguments passed to this function
go as extra arguments to @Lid{coroutine.resume}.
@Lid{coroutine.wrap} returns all the values returned by @Lid{coroutine.resume},
except the first one (the boolean error code).
Unlike @Lid{coroutine.resume},
@Lid{coroutine.wrap} does not catch errors;
any error is propagated to the caller.

As an example,
consider the following code:
@verbatim{
function foo (a)
  print("foo", a)
  return coroutine.yield(2*a)
end

co = coroutine.create(function (a,b)
      print("co-body", a, b)
      local r = foo(a+1)
      print("co-body", r)
      local r, s = coroutine.yield(a+b, a-b)
      print("co-body", r, s)
      return b, "end"
end)
       
print("main", coroutine.resume(co, 1, 10))
print("main", coroutine.resume(co, "r"))
print("main", coroutine.resume(co, "x", "y"))
print("main", coroutine.resume(co, "x", "y"))
}
When you run it, it produces the following output:
@verbatim{
co-body 1       10
foo     2

main    true    4
co-body r
main    true    11      -9
co-body x       y
main    true    10      end
main    false   cannot resume dead coroutine
}

}

}


@C{-------------------------------------------------------------------------}
@sect1{API| @title{The Application Program Interface}

@index{C API}
This section describes the @N{C API} for Lua, that is,
the set of @N{C functions} available to the host program to communicate
with Lua.
All API functions and related types and constants
are declared in the header file @defid{lua.h}.

Even when we use the term @Q{function},
any facility in the API may be provided as a macro instead.
All such macros use each of their arguments exactly once
(except for the first argument, which is always a Lua state),
and so do not generate any hidden side-effects.

As in most @N{C libraries},
the Lua API functions do not check their arguments for validity or consistency.
However, you can change this behavior by compiling Lua
with a proper definition for the macro @defid{luai_apicheck},
in file @id{luaconf.h}.


@sect2{@title{The Stack}

Lua uses a @emph{virtual stack} to pass values to and from C.
Each element in this stack represents a Lua value
(@nil, number, string, etc.).

Whenever Lua calls C, the called function gets a new stack,
which is independent of previous stacks and of stacks of
@N{C functions} that are still active.
This stack initially contains any arguments to the @N{C function}
and it is where the @N{C function} pushes its results
to be returned to the caller @seeC{lua_CFunction}.

For convenience,
most query operations in the API do not follow a strict stack discipline.
Instead, they can refer to any element in the stack
by using an @emph{index}:@index{index (API stack)}
A positive index represents an @emph{absolute} stack position
(starting @N{at 1});
a negative index represents an @emph{offset} relative to the top of the stack.
More specifically, if the stack has @rep{n} elements,
then @N{index 1} represents the first element
(that is, the element that was pushed onto the stack first)
and
@N{index @rep{n}} represents the last element;
@N{index @num{-1}} also represents the last element
(that is, the element at @N{the top})
and index @M{-n} represents the first element.
We say that an index is @emph{valid}
if it lies @N{between 1} and the stack top
(that is, if @T{1 @leq abs(index) @leq top}).
@index{stack index} @index{valid index}

}

@sect2{@title{Stack Size}

When you interact with Lua API,
you are responsible for ensuring consistency.
In particular,
@emph{you are responsible for controlling stack overflow}.
You can use the function @Lid{lua_checkstack}
to grow the stack size.

Whenever Lua calls C,
it ensures that at least @defid{LUA_MINSTACK} stack positions are available.
@id{LUA_MINSTACK} is defined as 20,
so that usually you do not have to worry about stack space
unless your code has loops pushing elements onto the stack.

Most query functions accept as indices any value inside the
available stack space, that is, indices up to the maximum stack size
you have set through @Lid{lua_checkstack}.
Such indices are called @emph{acceptable indices}.
More formally, we define an @def{acceptable index}
as follows:
@verbatim{
(index < 0 && abs(index) <= top) ||
(index > 0 && index <= stackspace)
}
Note that 0 is never an acceptable index.

}

@sect2{pseudo-index| @title{Pseudo-Indices}

Unless otherwise noted,
any function that accepts valid indices can also be called with
@def{pseudo-indices},
which represent some Lua values that are accessible to @N{C code}
but which are not in the stack.
Pseudo-indices are used to access the thread environment,
the function environment,
the registry,
and the upvalues of a @N{C function} @see{c-closure}.

The thread environment (where global variables live) is
always at pseudo-index @defid{LUA_GLOBALSINDEX}.
The environment of the running @N{C function} is always
at pseudo-index @defid{LUA_ENVIRONINDEX}.

To access and change the value of global variables,
you can use regular table operations over an environment table.
For instance, to access the value of a global variable, do
@verbatim{
lua_getfield(L, LUA_GLOBALSINDEX, varname);
}

}

@sect2{c-closure| @title{C Closures}

When a @N{C function} is created,
it is possible to associate some values with it,
thus creating a @def{@N{C closure}};
these values are called @def{upvalues} and are
accessible to the function whenever it is called
@seeC{lua_pushcclosure}.

Whenever a @N{C function} is called,
its upvalues are located at specific pseudo-indices.
These pseudo-indices are produced by the macro
@defid{lua_upvalueindex}.
The first value associated with a function is at position
@T{lua_upvalueindex(1)}, and so on.
Any access to @T{lua_upvalueindex(@rep{n})},
where @rep{n} is greater than the number of upvalues of the
current function (but not greater than 256),
produces an acceptable (but invalid) index.

}

@sect2{registry| @title{Registry}

Lua provides a @def{registry},
a pre-defined table that can be used by any @N{C code} to
store whatever Lua value it needs to store.
This table is always located at pseudo-index
@defid{LUA_REGISTRYINDEX}.
Any @N{C library} can store data into this table,
but it should take care to choose keys different from those used
by other libraries, to avoid collisions.
Typically, you should use as key a string containing your library name
or a light userdata with the address of a @N{C object} in your code.

The integer keys in the registry are used by the reference mechanism,
implemented by the auxiliary library,
and therefore should not be used for other purposes.

}

@sect2{@title{Error Handling in C}

Internally, Lua uses the C @id{longjmp} facility to handle errors.
(You can also choose to use exceptions if you use C++;
see file @id{luaconf.h}.)
When Lua faces any error
(such as memory allocation errors, type errors, syntax errors,
and runtime errors)
it @emph{raises} an error;
that is, it does a long jump.
A @emph{protected environment} uses @id{setjmp}
to set a recover point;
any error jumps to the most recent active recover point.

Most functions in the API can throw an error,
for instance due to a memory allocation error.
The documentation for each function indicates whether
it can throw errors.

Inside a @N{C function} you can throw an error by calling @Lid{lua_error}.

}

@sect2{@title{Functions and Types}

Here we list all functions and types from the @N{C API} in
alphabetical order.
Each function has an indicator like this:
@apii{o,p,x}

The first field, @T{o},
is how many elements the function pops from the stack.
The second field, @T{p},
is how many elements the function pushes onto the stack.
(Any function always pushes its results after popping its arguments.)
A field in the form @T{x|y} means the function can push (or pop)
@T{x} or @T{y} elements,
depending on the situation;
an interrogation mark @Char{?} means that
we cannot know how many elements the function pops/pushes
by looking only at its arguments
(e.g., they may depend on what is on the stack).
The third field, @T{x},
tells whether the function may throw errors:
@Char{-} means the function never throws any error;
@Char{m} means the function may throw an error
only due to not enough memory;
@Char{e} means the function may throw other kinds of errors;
@Char{v} means the function may throw an error on purpose.


@APIEntry{
typedef void * (*lua_Alloc) (void *ud,
                             void *ptr,
                             size_t osize,
                             size_t nsize);
|

The type of the @x{memory-allocation function} used by Lua states.
The allocator function must provide a
functionality similar to @id{realloc},
but not exactly the same.
Its arguments are
@id{ud}, an opaque pointer passed to @Lid{lua_newstate};
@id{ptr}, a pointer to the block being allocated/reallocated/freed;
@id{osize}, the original size of the block;
@id{nsize}, the new size of the block.
@id{ptr} is @id{NULL} if and only if @id{osize} is zero.
When @id{nsize} is zero, the allocator must return @id{NULL};
if @id{osize} is not zero,
it should free the block pointed to by @id{ptr}.
When @id{nsize} is not zero, the allocator returns @id{NULL}
if and only if it cannot fill the request.
When @id{nsize} is not zero and @id{osize} is zero,
the allocator should behave like @id{malloc}.
When @id{nsize} and @id{osize} are not zero,
the allocator behaves like @id{realloc}.
Lua assumes that the allocator never fails when
@T{osize >= nsize}.

Here is a simple implementation for the @x{allocator function}.
It is used in the auxiliary library by @Lid{luaL_newstate}.
@verbatim{
static void *l_alloc (void *ud, void *ptr, size_t osize,
                                           size_t nsize) {
  (void)ud;  (void)osize;  /* not used */
  if (nsize == 0) {
    free(ptr);
    return NULL;
  }
  else
    return realloc(ptr, nsize);
}
}
This code assumes
that @T{free(NULL)} has no effect and that
@T{realloc(NULL, size)} is equivalent to @T{malloc(size)}.
@N{ANSI C} ensures both behaviors.

}

@APIEntry{lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf);|
@apii{0,0,-}

Sets a new panic function and returns the old one.

If an error happens outside any protected environment,
Lua calls a @def{panic function}
and then calls @T{exit(EXIT_FAILURE)},
thus exiting the host application.
Your panic function can avoid this exit by
never returning (e.g., doing a long jump).

The panic function can access the error message at the top of the stack.

}

@APIEntry{void lua_call (lua_State *L, int nargs, int nresults);|
@apii{nargs + 1,nresults,e}


Calls a function.

To call a function you must use the following protocol:
first, the function to be called is pushed onto the stack;
then, the arguments to the function are pushed
in direct order;
that is, the first argument is pushed first.
Finally you call @Lid{lua_call};
@id{nargs} is the number of arguments that you pushed onto the stack.
All arguments and the function value are popped from the stack
when the function is called.
The function results are pushed onto the stack when the function returns.
The number of results is adjusted to @id{nresults},
unless @id{nresults} is @defid{LUA_MULTRET}.
In this case, @emph{all} results from the function are pushed.
Lua takes care that the returned values fit into the stack space.
The function results are pushed onto the stack in direct order
(the first result is pushed first),
so that after the call the last result is on the top of the stack.

Any error inside the called function is propagated upwards
(with a @id{longjmp}).

The following example shows how the host program can do the
equivalent to this Lua code:
@verbatim{
a = f("how", t.x, 14)
}
Here it is @N{in C}:
@verbatim{
lua_getfield(L, LUA_GLOBALSINDEX, "f"); /* function to be called */
lua_pushstring(L, "how");                        /* 1st argument */
lua_getfield(L, LUA_GLOBALSINDEX, "t");   /* table to be indexed */
lua_getfield(L, -1, "x");        /* push result of t.x (2nd arg) */
lua_remove(L, -2);                  /* remove 't' from the stack */
lua_pushinteger(L, 14);                          /* 3rd argument */
lua_call(L, 3, 1);     /* call 'f' with 3 arguments and 1 result */
lua_setfield(L, LUA_GLOBALSINDEX, "a");        /* set global 'a' */
}
Note that the code above is @Q{balanced}:
at its end, the stack is back to its original configuration.
This is considered good programming practice.

}

@APIEntry{typedef int (*lua_CFunction) (lua_State *L);|

Type for @N{C functions}.

In order to communicate properly with Lua,
a @N{C function} must use the following protocol,
which defines the way parameters and results are passed:
a @N{C function} receives its arguments from Lua in its stack
in direct order (the first argument is pushed first).
So, when the function starts,
@T{lua_gettop(L)} returns the number of arguments received by the function.
The first argument (if any) is at index 1
and its last argument is at index @T{lua_gettop(L)}.
To return values to Lua, a @N{C function} just pushes them onto the stack,
in direct order (the first result is pushed first),
and returns the number of results.
Any other value in the stack below the results will be properly
discarded by Lua.
Like a Lua function, a @N{C function} called by Lua can also return
many results.

As an example, the following function receives a variable number
of numerical arguments and returns their average and sum:
@verbatim{
static int foo (lua_State *L) {
  int n = lua_gettop(L);    /* number of arguments */
  lua_Number sum = 0;
  int i;
  for (i = 1; i <= n; i++) {
    if (!lua_isnumber(L, i)) {
      lua_pushstring(L, "incorrect argument");
      lua_error(L);
    }
    sum += lua_tonumber(L, i);
  }
  lua_pushnumber(L, sum/n);        /* first result */
  lua_pushnumber(L, sum);         /* second result */
  return 2;                   /* number of results */
}
}



}

@APIEntry{int lua_checkstack (lua_State *L, int extra);|
@apii{0,0,m}

Ensures that there are at least @id{extra} free stack slots in the stack.
It returns false if it cannot grow the stack to that size.
This function never shrinks the stack;
if the stack is already larger than the new size,
it is left unchanged.

}

@APIEntry{void lua_close (lua_State *L);|
@apii{0,0,-}

Destroys all objects in the given Lua state
(calling the corresponding garbage-collection metamethods, if any)
and frees all dynamic memory used by this state.
On several platforms, you may not need to call this function,
because all resources are naturally released when the host program ends.
On the other hand, long-running programs,
such as a daemon or a web server,
might need to release states as soon as they are not needed,
to avoid growing too large.

}

@APIEntry{void lua_concat (lua_State *L, int n);|
@apii{n,1,e}

Concatenates the @id{n} values at the top of the stack,
pops them, and leaves the result at the top.
If @N{@T{n} is 1}, the result is the single value on the stack
(that is, the function does nothing);
if @id{n} is 0, the result is the empty string.
Concatenation is performed following the usual semantics of Lua
@see{concat}.

}

@APIEntry{int lua_cpcall (lua_State *L, lua_CFunction func, void *ud);|
@apii{0,0|1,-}

Calls the @N{C function} @id{func} in protected mode.
@id{func} starts with only one element in its stack,
a light userdata containing @id{ud}.
In case of errors,
@Lid{lua_cpcall} returns the same error codes as @Lid{lua_pcall},
plus the error object on the top of the stack;
otherwise, it returns zero, and does not change the stack.
All values returned by @id{func} are discarded.

}

@APIEntry{void lua_createtable (lua_State *L, int narr, int nrec);|
@apii{0,1,m}

Creates a new empty table and pushes it onto the stack.
The new table has space pre-allocated
for @id{narr} array elements and @id{nrec} non-array elements.
This pre-allocation is useful when you know exactly how many elements
the table will have.
Otherwise you can use the function @Lid{lua_newtable}.

}

@APIEntry{int lua_dump (lua_State *L, lua_Writer writer, void *data);|
@apii{0,0,m}

Dumps a function as a binary chunk.
Receives a Lua function on the top of the stack
and produces a binary chunk that,
if loaded again,
results in a function equivalent to the one dumped.
As it produces parts of the chunk,
@Lid{lua_dump} calls function @id{writer} @seeC{lua_Writer}
with the given @id{data}
to write them.

The value returned is the error code returned by the last
call to the writer;
@N{0 means} no errors.

This function does not pop the Lua function from the stack.

}

@APIEntry{int lua_equal (lua_State *L, int index1, int index2);|
@apii{0,0,e}

Returns 1 if the two values in acceptable indices @id{index1} and
@id{index2} are equal,
following the semantics of the Lua @T{==} operator
(that is, may call metamethods).
Otherwise @N{returns 0}.
Also @N{returns 0} if any of the indices is non valid.

}

@APIEntry{int lua_error (lua_State *L);|
@apii{1,0,v}

Generates a Lua error.
The error message (which can actually be a Lua value of any type)
must be on the stack top.
This function does a long jump,
and therefore never returns.
@seeC{luaL_error}.

}

@APIEntry{int lua_gc (lua_State *L, int what, int data);|
@apii{0,0,e}

Controls the garbage collector.

This function performs several tasks,
according to the value of the parameter @id{what}:
@description{

@item{@id{LUA_GCSTOP}|
stops the garbage collector.
}

@item{@id{LUA_GCRESTART}|
restarts the garbage collector.
}

@item{@id{LUA_GCCOLLECT}|
performs a full garbage-collection cycle.
}

@item{@id{LUA_GCCOUNT}|
returns the current amount of memory (in Kbytes) in use by Lua.
}

@item{@id{LUA_GCCOUNTB}|
returns the remainder of dividing the current amount of bytes of
memory in use by Lua by 1024.
}

@item{@id{LUA_GCSTEP}|
performs an incremental step of garbage collection.
The step @Q{size} is controlled by @id{data}
(larger values mean more steps) in a non-specified way.
If you want to control the step size
you must experimentally tune the value of @id{data}.
The function returns 1 if the step finished a
garbage-collection cycle.
}

@item{@id{LUA_GCSETPAUSE}|
sets @id{data} as the new value
for the @emph{pause} of the collector @see{GC}.
The function returns the previous value of the pause.
}

@item{@id{LUA_GCSETSTEPMUL}|
sets @id{data} as the new value for the @emph{step multiplier} of
the collector @see{GC}.
The function returns the previous value of the step multiplier.
}

}

}

@APIEntry{lua_Alloc lua_getallocf (lua_State *L, void **ud);|
@apii{0,0,-}

Returns the @x{memory-allocation function} of a given state.
If @id{ud} is not @id{NULL}, Lua stores in @T{*ud} the
opaque pointer passed to @Lid{lua_newstate}.

}

@APIEntry{void lua_getfenv (lua_State *L, int index);|
@apii{0,1,-}

Pushes onto the stack the environment table of
the value at the given index.

}

@APIEntry{void lua_getfield (lua_State *L, int index, const char *k);|
@apii{0,1,e}

Pushes onto the stack the value @T{t[k]},
where @id{t} is the value at the given valid index.
As in Lua, this function may trigger a metamethod
for the @Q{index} event @see{metatable}.

}

@APIEntry{void lua_getglobal (lua_State *L, const char *name);|
@apii{0,1,e}

Pushes onto the stack the value of the global @id{name}.
It is defined as a macro:
@verbatim{
#define lua_getglobal(L,s)  lua_getfield(L, LUA_GLOBALSINDEX, s)
}

} 

@APIEntry{int lua_getmetatable (lua_State *L, int index);|
@apii{0,0|1,-}

Pushes onto the stack the metatable of the value at the given
acceptable index.
If the index is not valid,
or if the value does not have a metatable,
the function @N{returns 0} and pushes nothing on the stack.

}

@APIEntry{void lua_gettable (lua_State *L, int index);|
@apii{1,1,e}

Pushes onto the stack the value @T{t[k]},
where @id{t} is the value at the given valid index
and @id{k} is the value at the top of the stack.

This function pops the key from the stack
(putting the resulting value in its place).
As in Lua, this function may trigger a metamethod
for the @Q{index} event @see{metatable}.

}

@APIEntry{int lua_gettop (lua_State *L);|
@apii{0,0,-}

Returns the index of the top element in the stack.
Because indices start @N{at 1},
this result is equal to the number of elements in the stack
(and so @N{0 means} an empty stack).

}

@APIEntry{void lua_insert (lua_State *L, int index);|
@apii{1,1,-}

Moves the top element into the given valid index,
shifting up the elements above this index to open space.
Cannot be called with a pseudo-index,
because a pseudo-index is not an actual stack position.

}

@APIEntry{typedef ptrdiff_t lua_Integer;|

The type used by the Lua API to represent integral values.

By default it is a @id{ptrdiff_t},
which is usually the largest signed integral type the machine handles
@Q{comfortably}.

}

@APIEntry{int lua_isboolean (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index has type boolean,
and @N{0 otherwise}.

}

@APIEntry{int lua_iscfunction (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a @N{C function},
and @N{0 otherwise}.

}

@APIEntry{int lua_isfunction (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a function
(either C or Lua), and @N{0 otherwise}.

}

@APIEntry{int lua_islightuserdata (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a light userdata,
and @N{0 otherwise}.

}

@APIEntry{int lua_isnil (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is @nil,
and @N{0 otherwise}.

}

@APIEntry{int lua_isnone (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the given acceptable index is not valid
(that is, it refers to an element outside the current stack),
and @N{0 otherwise}.

}

@APIEntry{int lua_isnoneornil (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the given acceptable index is not valid
(that is, it refers to an element outside the current stack)
or if the value at this index is @nil,
and @N{0 otherwise}.

}

@APIEntry{int lua_isnumber (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a number
or a string convertible to a number,
and @N{0 otherwise}.

}

@APIEntry{int lua_isstring (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a string
or a number (which is always convertible to a string),
and @N{0 otherwise}.

}

@APIEntry{int lua_istable (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a table,
and @N{0 otherwise}.

}

@APIEntry{int lua_isthread (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a thread,
and @N{0 otherwise}.

}

@APIEntry{int lua_isuserdata (lua_State *L, int index);|
@apii{0,0,-}

Returns 1 if the value at the given acceptable index is a userdata
(either full or light), and @N{0 otherwise}.

}

@APIEntry{int lua_lessthan (lua_State *L, int index1, int index2);|
@apii{0,0,e}

Returns 1 if the value at acceptable index @id{index1} is smaller
than the value at acceptable index @id{index2},
following the semantics of the Lua @T{<} operator
(that is, may call metamethods).
Otherwise @N{returns 0}.
Also @N{returns 0} if any of the indices is non valid.

}

@APIEntry{
int lua_load (lua_State *L,
              lua_Reader reader,
              void *data,
              const char *chunkname);
|
@apii{0,1,-}

Loads a Lua chunk.
If there are no errors,
@Lid{lua_load} pushes the compiled chunk as a Lua
function on top of the stack.
Otherwise, it pushes an error message.
The return values of @Lid{lua_load} are:
@description{

@item{0| no errors;}

@item{@defid{LUA_ERRSYNTAX}|
syntax error during pre-compilation;}

@item{@Lid{LUA_ERRMEM}|
memory allocation error.}

}

This function only loads a chunk;
it does not run it.

@Lid{lua_load} automatically detects whether the chunk is text or binary,
and loads it accordingly (see program @idx{luac}).

The @Lid{lua_load} function uses a user-supplied @id{reader} function
to read the chunk @seeC{lua_Reader}.
The @id{data} argument is an opaque value passed to the reader function.

The @id{chunkname} argument gives a name to the chunk,
which is used for error messages and in debug information @see{debugI}.

}

@APIEntry{lua_State *lua_newstate (lua_Alloc f, void *ud);|
@apii{0,0,-}

Creates a new, independent state.
Returns @id{NULL} if cannot create the state
(due to lack of memory).
The argument @id{f} is the @x{allocator function};
Lua does all memory allocation for this state through this function.
The second argument, @id{ud}, is an opaque pointer that Lua
simply passes to the allocator in every call.

}

@APIEntry{void lua_newtable (lua_State *L);|
@apii{0,1,m}

Creates a new empty table and pushes it onto the stack.
It is equivalent to @T{lua_createtable(L, 0, 0)}.

}

@APIEntry{lua_State *lua_newthread (lua_State *L);|
@apii{0,1,m}

Creates a new thread, pushes it on the stack,
and returns a pointer to a @Lid{lua_State} that represents this new thread.
The new state returned by this function shares with the original state
all global objects (such as tables),
but has an independent execution stack.

There is no explicit function to close or to destroy a thread.
Threads are subject to garbage collection,
like any Lua object.

}

@APIEntry{void *lua_newuserdata (lua_State *L, size_t size);|
@apii{0,1,m}

This function allocates a new block of memory with the given size,
pushes onto the stack a new full userdata with the block address,
and returns this address.

Userdata represent @N{C values} in Lua.
A @def{full userdata} represents a block of memory.
It is an object (like a table):
you must create it, it can have its own metatable,
and you can detect when it is being collected.
A full userdata is only equal to itself (under raw equality).

When Lua collects a full userdata with a @id{gc} metamethod,
Lua calls the metamethod and marks the userdata as finalized.
When this userdata is collected again then
Lua frees its corresponding memory.

}

@APIEntry{int lua_next (lua_State *L, int index);|
@apii{1,2|0,e}

Pops a key from the stack,
and pushes a key-value pair from the table at the given index
(the @Q{next} pair after the given key).
If there are no more elements in the table,
then @Lid{lua_next} returns 0 (and pushes nothing).

A typical traversal looks like this:
@verbatim{
/* table is in the stack at index 't' */
lua_pushnil(L);  /* first key */
while (lua_next(L, t) != 0) {
  /* uses 'key' (at index -2) and 'value' (at index -1) */
  printf("%s - %s\n",
         lua_typename(L, lua_type(L, -2)),
         lua_typename(L, lua_type(L, -1)));
  /* removes 'value'; keeps 'key' for next iteration */
  lua_pop(L, 1);
}
}

While traversing a table,
do not call @Lid{lua_tolstring} directly on a key,
unless you know that the key is actually a string.
Recall that @Lid{lua_tolstring} @emph{changes}
the value at the given index;
this confuses the next call to @Lid{lua_next}.

}

@APIEntry{typedef double lua_Number;|

The type of numbers in Lua.
By default, it is double, but that can be changed in @id{luaconf.h}.

Through the configuration file you can change
Lua to operate with another type for numbers (e.g., float or long).

}

@APIEntry{size_t lua_objlen (lua_State *L, int index);|
@apii{0,0,-}

Returns the @Q{length} of the value at the given acceptable index:
for strings, this is the string length;
for tables, this is the result of the length operator (@Char{#});
for userdata, this is the size of the block of memory allocated
for the userdata;
for other values, it @N{is 0}.

}

@APIEntry{int lua_pcall (lua_State *L, int nargs, int nresults, int errfunc);|
@apii{nargs + 1,nresults|1,-}

Calls a function in protected mode.

Both @id{nargs} and @id{nresults} have the same meaning as
in @Lid{lua_call}.
If there are no errors during the call,
@Lid{lua_pcall} behaves exactly like @Lid{lua_call}.
However, if there is any error,
@Lid{lua_pcall} catches it,
pushes a single value on the stack (the error message),
and returns an error code.
Like @Lid{lua_call},
@Lid{lua_pcall} always removes the function
and its arguments from the stack.

If @id{errfunc} is 0,
then the error message returned on the stack
is exactly the original error message.
Otherwise, @id{errfunc} is the stack index of an
@emph{error handler function}.
(In the current implementation, this index cannot be a pseudo-index.)
In case of runtime errors,
this function will be called with the error message
and its return value will be the message returned on the stack by @Lid{lua_pcall}.

Typically, the error handler function is used to add more debug
information to the error message, such as a stack traceback.
Such information cannot be gathered after the return of @Lid{lua_pcall},
since by then the stack has unwound.

The @Lid{lua_pcall} function returns 0 in case of success
or one of the following error codes
(defined in @id{lua.h}):
@description{

@item{@defid{LUA_ERRRUN}|
a runtime error.
}

@item{@defid{LUA_ERRMEM}|
memory allocation error.
For such errors, Lua does not call the error handler function.
}

@item{@defid{LUA_ERRERR}|
error while running the error handler function.
}

}

}

@APIEntry{void lua_pop (lua_State *L, int n);|
@apii{n,0,-}

Pops @id{n} elements from the stack.

}

@APIEntry{void lua_pushboolean (lua_State *L, int b);|
@apii{0,1,-}

Pushes a boolean value with value @id{b} onto the stack.

}

@APIEntry{void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);|
@apii{n,1,m}

Pushes a new @N{C closure} onto the stack.

When a @N{C function} is created,
it is possible to associate some values with it,
thus creating a @x{@N{C closure}} @see{c-closure};
these values are then accessible to the function whenever it is called.
To associate values with a @N{C function},
first these values should be pushed onto the stack
(when there are multiple values, the first value is pushed first).
Then @Lid{lua_pushcclosure}
is called to create and push the @N{C function} onto the stack,
with the argument @id{n} telling how many values should be
associated with the function.
@Lid{lua_pushcclosure} also pops these values from the stack.

The maximum value for @id{n} is 255.

}

@APIEntry{void lua_pushcfunction (lua_State *L, lua_CFunction f);|
@apii{0,1,m}

Pushes a @N{C function} onto the stack.
This function receives a pointer to a C function
and pushes onto the stack a Lua value of type @id{function} that,
when called, invokes the corresponding @N{C function}.

Any function to be registered in Lua must
follow the correct protocol to receive its parameters
and return its results @seeC{lua_CFunction}.

@id{lua_pushcfunction} is defined as a macro:
@verbatim{
#define lua_pushcfunction(L,f)  lua_pushcclosure(L,f,0)
}

}

@APIEntry{const char *lua_pushfstring (lua_State *L, const char *fmt, ...);|
@apii{0,1,m}

Pushes onto the stack a formatted string
and returns a pointer to this string.
It is similar to the @N{C function} @id{sprintf},
but has some important differences:
@itemize{

@item{
You do not have to allocate space for the result:
the result is a Lua string and Lua takes care of memory allocation
(and deallocation, through garbage collection).
}

@item{
The conversion specifiers are quite restricted.
There are no flags, widths, or precisions.
The conversion specifiers can only be
@Char{%%} (inserts a @Char{%} in the string),
@Char{%s} (inserts a zero-terminated string, with no size restrictions),
@Char{%f} (inserts a @Lid{lua_Number}),
@Char{%p} (inserts a pointer as a hexadecimal numeral),
@Char{%d} (inserts an @T{int}), and
@Char{%c} (inserts an @T{int} as a character).
}

}

}

@APIEntry{void lua_pushinteger (lua_State *L, lua_Integer n);|
@apii{0,1,-}

Pushes a number with value @id{n} onto the stack.

}

@APIEntry{void lua_pushlightuserdata (lua_State *L, void *p);|
@apii{0,1,-}

Pushes a light userdata onto the stack.

Userdata represent @N{C values} in Lua.
A @def{light userdata} represents a pointer.
It is a value (like a number):
you do not create it, it has no individual metatable,
and it is not collected (as it was never created).
A light userdata is equal to @Q{any}
light userdata with the same @N{C address}.

}

@APIEntry{void lua_pushliteral (lua_State *L, const char *s);|
@apii{0,1,m}

This macro is equivalent to @Lid{lua_pushlstring},
but can be used only when @id{s} is a literal string.
In these cases, it automatically provides the string length.

}

@APIEntry{void lua_pushlstring (lua_State *L, const char *s, size_t len);|
@apii{0,1,m}

Pushes the string pointed to by @id{s} with size @id{len}
onto the stack.
Lua makes (or reuses) an internal copy of the given string,
so the memory at @id{s} can be freed or reused immediately after
the function returns.
The string can contain embedded zeros.

}

@APIEntry{void lua_pushnil (lua_State *L);|
@apii{0,1,-}

Pushes a nil value onto the stack.

}

@APIEntry{void lua_pushnumber (lua_State *L, lua_Number n);|
@apii{0,1,-}

Pushes a number with value @id{n} onto the stack.

}

@APIEntry{void lua_pushstring (lua_State *L, const char *s);|
@apii{0,1,m}

Pushes the zero-terminated string pointed to by @id{s}
onto the stack.
Lua makes (or reuses) an internal copy of the given string,
so the memory at @id{s} can be freed or reused immediately after
the function returns.
The string cannot contain embedded zeros;
it is assumed to end at the first zero.

}

@APIEntry{int lua_pushthread (lua_State *L);|
@apii{0,1,-}

Pushes the thread represented by @id{L} onto the stack.
Returns 1 if this thread is the main thread of its state.

}

@APIEntry{void lua_pushvalue (lua_State *L, int index);|
@apii{0,1,-}

Pushes a copy of the element at the given valid index
onto the stack.

}

@APIEntry{
const char *lua_pushvfstring (lua_State *L,
                              const char *fmt,
                              va_list argp);
|
@apii{0,1,m}

Equivalent to @Lid{lua_pushfstring}, except that it receives a @id{va_list}
instead of a variable number of arguments.

}

@APIEntry{int lua_rawequal (lua_State *L, int index1, int index2);|
@apii{0,0,-}

Returns 1 if the two values in acceptable indices @id{index1} and
@id{index2} are primitively equal
(that is, without calling metamethods).
Otherwise @N{returns 0}.
Also @N{returns 0} if any of the indices are non valid.

}

@APIEntry{void lua_rawget (lua_State *L, int index);|
@apii{1,1,-}

Similar to @Lid{lua_gettable}, but does a raw access
(i.e., without metamethods).

}

@APIEntry{void lua_rawgeti (lua_State *L, int index, int n);|
@apii{0,1,-}

Pushes onto the stack the value @T{t[n]},
where @id{t} is the value at the given valid index.
The access is raw;
that is, it does not invoke metamethods.

}

@APIEntry{void lua_rawset (lua_State *L, int index);|
@apii{2,0,m}

Similar to @Lid{lua_settable}, but does a raw assignment
(i.e., without metamethods).

}

@APIEntry{void lua_rawseti (lua_State *L, int index, int n);|
@apii{1,0,m}

Does the equivalent of @T{t[n] = v},
where @id{t} is the value at the given valid index
and @id{v} is the value at the top of the stack.

This function pops the value from the stack.
The assignment is raw;
that is, it does not invoke metamethods.

}

@APIEntry{
typedef const char * (*lua_Reader) (lua_State *L,
                                    void *data,
                                    size_t *size);
|

The reader function used by @Lid{lua_load}.
Every time it needs another piece of the chunk,
@Lid{lua_load} calls the reader,
passing along its @id{data} parameter.
The reader must return a pointer to a block of memory
with a new piece of the chunk
and set @id{size} to the block size.
The block must exist until the reader function is called again.
To signal the end of the chunk,
the reader must return @id{NULL} or set @id{size} to zero.
The reader function may return pieces of any size greater than zero.

}

@APIEntry{
void lua_register (lua_State *L,
                   const char *name,
                   lua_CFunction f);
|
@apii{0,0,e}

Sets the C function @id{f} as the new value of global @id{name}.
It is defined as a macro:
@verbatim{
#define lua_register(L,n,f) \
       (lua_pushcfunction(L, f), lua_setglobal(L, n))
}

}

@APIEntry{void lua_remove (lua_State *L, int index);|
@apii{1,0,-}

Removes the element at the given valid index,
shifting down the elements above this index to fill the gap.
Cannot be called with a pseudo-index,
because a pseudo-index is not an actual stack position.

}

@APIEntry{void lua_replace (lua_State *L, int index);|
@apii{1,0,-}

Moves the top element into the given position (and pops it),
without shifting any element
(therefore replacing the value at the given position).

}

@APIEntry{int lua_resume (lua_State *L, int narg);|
@apii{?,?,-}

Starts and resumes a coroutine in a given thread.

To start a coroutine, you first create a new thread
@seeC{lua_newthread};
then you push onto its stack the main function plus any arguments;
then you call @Lid{lua_resume},
with @id{narg} being the number of arguments.
This call returns when the coroutine suspends or finishes its execution.
When it returns, the stack contains all values passed to @Lid{lua_yield},
or all values returned by the body function.
@Lid{lua_resume} returns
@Lid{LUA_YIELD} if the coroutine yields,
0 if the coroutine finishes its execution
without errors,
or an error code in case of errors @seeC{lua_pcall}.
In case of errors,
the stack is not unwound,
so you can use the debug API over it.
The error message is on the top of the stack.
To restart a coroutine, you put on its stack only the values to
be passed as results from @id{yield},
and then call @Lid{lua_resume}.

}

@APIEntry{void lua_setallocf (lua_State *L, lua_Alloc f, void *ud);|
@apii{0,0,-}

Changes the @x{allocator function} of a given state to @id{f}
with user data @id{ud}.

}

@APIEntry{int lua_setfenv (lua_State *L, int index);|
@apii{1,0,-}

Pops a table from the stack and sets it as
the new environment for the value at the given index.
If the value at the given index is
neither a function nor a thread nor a userdata,
@Lid{lua_setfenv} returns 0.
Otherwise it returns 1.

}

@APIEntry{void lua_setfield (lua_State *L, int index, const char *k);|
@apii{1,0,e}

Does the equivalent to @T{t[k] = v},
where @id{t} is the value at the given valid index
and @id{v} is the value at the top of the stack.

This function pops the value from the stack.
As in Lua, this function may trigger a metamethod
for the @Q{newindex} event @see{metatable}.

}

@APIEntry{void lua_setglobal (lua_State *L, const char *name);|
@apii{1,0,e}

Pops a value from the stack and
sets it as the new value of global @id{name}.
It is defined as a macro:
@verbatim{
#define lua_setglobal(L,s)   lua_setfield(L, LUA_GLOBALSINDEX, s)
}

}

@APIEntry{int lua_setmetatable (lua_State *L, int index);|
@apii{1,0,-}

Pops a table from the stack and
sets it as the new metatable for the value at the given
acceptable index.

}

@APIEntry{void lua_settable (lua_State *L, int index);|
@apii{2,0,e}

Does the equivalent to @T{t[k] = v},
where @id{t} is the value at the given valid index,
@id{v} is the value at the top of the stack,
and @id{k} is the value just below the top.

This function pops both the key and the value from the stack.
As in Lua, this function may trigger a metamethod
for the @Q{newindex} event @see{metatable}.

}

@APIEntry{void lua_settop (lua_State *L, int index);|
@apii{?,?,-}

Accepts any acceptable index, @N{or 0},
and sets the stack top to this index.
If the new top is larger than the old one,
then the new elements are filled with @nil.
If @id{index} @N{is 0}, then all stack elements are removed.

}

@APIEntry{typedef struct lua_State lua_State;|

Opaque structure that keeps the whole state of a Lua interpreter.
The Lua library is fully reentrant:
it has no global variables.
All information about a state is kept in this structure.

A pointer to this state must be passed as the first argument to
every function in the library, except to @Lid{lua_newstate},
which creates a Lua state from scratch.

}

@APIEntry{int lua_status (lua_State *L);|
@apii{0,0,-}

Returns the status of the thread @id{L}.

The status can be 0 for a normal thread,
an error code if the thread finished its execution with an error,
or @defid{LUA_YIELD} if the thread is suspended.

}

@APIEntry{int lua_toboolean (lua_State *L, int index);|
@apii{0,0,-}

Converts the Lua value at the given acceptable index to a @N{C boolean}
value (@N{0 or 1}).
Like all tests in Lua,
@Lid{lua_toboolean} returns 1 for any Lua value
different from @false and @nil;
otherwise it returns 0.
It also returns 0 when called with a non-valid index.
(If you want to accept only actual boolean values,
use @Lid{lua_isboolean} to test the value's type.)

}

@APIEntry{lua_CFunction lua_tocfunction (lua_State *L, int index);|
@apii{0,0,-}

Converts a value at the given acceptable index to a @N{C function}.
That value must be a @N{C function};
otherwise, returns @id{NULL}.

}

@APIEntry{lua_Integer lua_tointeger (lua_State *L, int index);|
@apii{0,0,-}

Converts the Lua value at the given acceptable index
to the signed integral type @Lid{lua_Integer}.
The Lua value must be a number or a string convertible to a number
@see{coercion};
otherwise, @Lid{lua_tointeger} @N{returns 0}.

If the number is not an integer,
it is truncated in some non-specified way.

}

@APIEntry{const char *lua_tolstring (lua_State *L, int index, size_t *len);|
@apii{0,0,m}

Converts the Lua value at the given acceptable index to a @N{C string}.
If @id{len} is not @id{NULL},
it also sets @T{*len} with the string length.
The Lua value must be a string or a number;
otherwise, the function returns @id{NULL}.
If the value is a number,
then @Lid{lua_tolstring} also
@emph{changes the actual value in the stack to a string}.
(This change confuses @Lid{lua_next}
when @Lid{lua_tolstring} is applied to keys during a table traversal.)

@Lid{lua_tolstring} returns a fully aligned pointer
to a string inside the Lua state.
This string always has a zero (@Char{\0})
after its last character (as @N{in C}),
but can contain other zeros in its body.
Because Lua has garbage collection,
there is no guarantee that the pointer returned by @Lid{lua_tolstring}
will be valid after the corresponding value is removed from the stack.

}

@APIEntry{lua_Number lua_tonumber (lua_State *L, int index);|
@apii{0,0,-}

Converts the Lua value at the given acceptable index
to the @N{C type} @Lid{lua_Number} @seeC{lua_Number}.
The Lua value must be a number or a string convertible to a number
@see{coercion};
otherwise, @Lid{lua_tonumber} @N{returns 0}.

}

@APIEntry{const void *lua_topointer (lua_State *L, int index);|
@apii{0,0,-}

Converts the value at the given acceptable index to a generic
@N{C pointer} (@T{void*}).
The value can be a userdata, a table, a thread, or a function;
otherwise, @Lid{lua_topointer} returns @id{NULL}.
Different objects will give different pointers.
There is no way to convert the pointer back to its original value.

Typically this function is used only for debug information.

}

@APIEntry{const char *lua_tostring (lua_State *L, int index);|
@apii{0,0,m}

Equivalent to @Lid{lua_tolstring} with @id{len} equal to @id{NULL}.

}

@APIEntry{lua_State *lua_tothread (lua_State *L, int index);|
@apii{0,0,-}

Converts the value at the given acceptable index to a Lua thread
(represented as @T{lua_State*}).
This value must be a thread;
otherwise, the function returns @id{NULL}.

}

@APIEntry{void *lua_touserdata (lua_State *L, int index);|
@apii{0,0,-}

If the value at the given acceptable index is a full userdata,
returns its block address.
If the value is a light userdata,
returns its pointer.
Otherwise, returns @id{NULL}.

}

@APIEntry{int lua_type (lua_State *L, int index);|
@apii{0,0,-}

Returns the type of the value in the given acceptable index,
or @id{LUA_TNONE} for a non-valid index
(that is, an index to an @Q{empty} stack position).
The types returned by @Lid{lua_type} are coded by the following constants
defined in @id{lua.h}:
@id{LUA_TNIL},
@id{LUA_TNUMBER},
@id{LUA_TBOOLEAN},
@id{LUA_TSTRING},
@id{LUA_TTABLE},
@id{LUA_TFUNCTION},
@id{LUA_TUSERDATA},
@id{LUA_TTHREAD},
and
@id{LUA_TLIGHTUSERDATA}.

}

@APIEntry{const char *lua_typename  (lua_State *L, int tp);|
@apii{0,0,-}

Returns the name of the type encoded by the value @id{tp},
which must be one the values returned by @Lid{lua_type}.

}

@APIEntry{
typedef int (*lua_Writer) (lua_State *L,
                           const void* p,
                           size_t sz,
                           void* ud);
|

The type of the writer function used by @Lid{lua_dump}.
Every time it produces another piece of chunk,
@Lid{lua_dump} calls the writer,
passing along the buffer to be written (@id{p}),
its size (@id{sz}),
and the @id{data} parameter supplied to @Lid{lua_dump}.

The writer returns an error code:
@N{0 means} no errors;
any other value means an error and stops @Lid{lua_dump} from
calling the writer again.

}

@APIEntry{void lua_xmove (lua_State *from, lua_State *to, int n);|
@apii{?,?,-}

Exchange values between different threads of the @emph{same} global state.

This function pops @id{n} values from the stack @id{from},
and pushes them onto the stack @id{to}.

}

@APIEntry{int lua_yield  (lua_State *L, int nresults);|
@apii{?,?,-}

Yields a coroutine.

This function should only be called as the
return expression of a @N{C function}, as follows:
@verbatim{
return lua_yield (L, nresults);
}
When a @N{C function} calls @Lid{lua_yield} in that way,
the running coroutine suspends its execution,
and the call to @Lid{lua_resume} that started this coroutine returns.
The parameter @id{nresults} is the number of values from the stack
that are passed as results to @Lid{lua_resume}.

}

}

@sect2{debugI| @title{The Debug Interface}

Lua has no built-in debugging facilities.
Instead, it offers a special interface
by means of functions and @emph{hooks}.
This interface allows the construction of different
kinds of debuggers, profilers, and other tools
that need @Q{inside information} from the interpreter.


@APIEntry{
typedef struct lua_Debug {
  int event;
  const char *name;           /* (n) */
  const char *namewhat;       /* (n) */
  const char *what;           /* (S) */
  const char *source;         /* (S) */
  int currentline;            /* (l) */
  int nups;                   /* (u) number of upvalues */
  int linedefined;            /* (S) */
  int lastlinedefined;        /* (S) */
  char short_src[LUA_IDSIZE]; /* (S) */
  /* private part */
  @rep{other fields}
} lua_Debug;
|

A structure used to carry different pieces of
information about an active function.
@Lid{lua_getstack} fills only the private part
of this structure, for later use.
To fill the other fields of @Lid{lua_Debug} with useful information,
call @Lid{lua_getinfo}.

The fields of @Lid{lua_Debug} have the following meaning:
@description{

@item{@id{source}|
If the function was defined in a string,
then @T{source} is that string.
If the function was defined in a file,
then @T{source} starts with a @Char{@At} followed by the file name.
}

@item{@id{short_src}|
a @Q{printable} version of @T{source}, to be used in error messages.
}

@item{@id{linedefined}|
the line number where the definition of the function starts.
}

@item{@id{lastlinedefined}|
the line number where the definition of the function ends.
}

@item{@id{what}|
the string @T{"Lua"} if the function is a Lua function,
@T{"C"} if it is a @N{C function},
@T{"main"} if it is the main part of a chunk,
and @T{"tail"} if it was a function that did a tail call.
In the latter case,
Lua has no other information about the function.
}

@item{@id{currentline}|
the current line where the given function is executing.
When no line information is available,
@T{currentline} is set to @num{-1}.
}

@item{@id{name}|
a reasonable name for the given function.
Because functions in Lua are first-class values,
they do not have a fixed name:
some functions can be the value of multiple global variables,
while others can be stored only in a table field.
The @T{lua_getinfo} function checks how the function was
called to find a suitable name.
If it cannot find a name,
then @T{name} is set to @T{NULL}.
}

@item{@id{namewhat}|
explains the @T{name} field.
The value of @T{namewhat} can be
@T{"global"}, @T{"local"}, @T{"method"},
@T{"field"}, @T{"upvalue"}, or @T{""} (the empty string),
according to how the function was called.
(Lua uses the empty string when no other option seems to apply.)
}

@item{@id{nups}|
the number of upvalues of the function.
}

}

}

@APIEntry{lua_Hook lua_gethook (lua_State *L);|
@apii{0,0,-}

Returns the current hook function.

}

@APIEntry{int lua_gethookcount (lua_State *L);|
@apii{0,0,-}

Returns the current hook count.

}

@APIEntry{int lua_gethookmask (lua_State *L);|
@apii{0,0,-}

Returns the current hook mask.

}

@APIEntry{int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);|
@apii{0|1,0|1|2,m}

Returns information about a specific function or function invocation.

To get information about a function invocation,
the parameter @id{ar} must be a valid activation record that was
filled by a previous call to @Lid{lua_getstack} or
given as argument to a hook @seeC{lua_Hook}.

To get information about a function you push it onto the stack
and start the @id{what} string with the character @Char{>}.
(In that case,
@id{lua_getinfo} pops the function in the top of the stack.)
For instance, to know in which line a function @id{f} was defined,
you can write the following code:
@verbatim{
lua_Debug ar;
lua_getfield(L, LUA_GLOBALSINDEX, "f");  /* get global 'f' */
lua_getinfo(L, ">S", &ar);
printf("%d\n", ar.linedefined);
}

Each character in the string @id{what}
selects some fields of the structure @id{ar} to be filled or
a value to be pushed on the stack:
@description{

@item{@Char{n}| fills in the field @id{name} and @id{namewhat};
}

@item{@Char{S}|
fills in the fields @id{source}, @id{short_src},
@id{linedefined}, @id{lastlinedefined}, and @id{what};
}

@item{@Char{l}| fills in the field @id{currentline};
}

@item{@Char{u}| fills in the field @id{nups};
}

@item{@Char{f}|
pushes onto the stack the function that is
running at the given level;
}

@item{@Char{L}|
pushes onto the stack a table whose indices are the
numbers of the lines that are valid on the function.
(A @emph{valid line} is a line with some associated code,
that is, a line where you can put a break point.
Non-valid lines include empty lines and comments.)
}

}

This function returns 0 on error
(for instance, an invalid option in @id{what}).

}

@APIEntry{const char *lua_getlocal (lua_State *L, lua_Debug *ar, int n);|
@apii{0,0|1,-}

Gets information about a local variable of a given activation record.
The parameter @id{ar} must be a valid activation record that was
filled by a previous call to @Lid{lua_getstack} or
given as argument to a hook @seeC{lua_Hook}.
The index @id{n} selects which local variable to inspect
(1 is the first parameter or active local variable, and so on,
until the last active local variable).
@Lid{lua_getlocal} pushes the variable's value onto the stack
and returns its name.

Variable names starting with @Char{(} (open parentheses)
represent internal variables
(loop control variables, temporaries, and @N{C function} locals).

Returns @id{NULL} (and pushes nothing)
when the index is greater than
the number of active local variables.

}

@APIEntry{int lua_getstack (lua_State *L, int level, lua_Debug *ar);|
@apii{0,0,-}

Get information about the interpreter runtime stack.

This function fills parts of a @Lid{lua_Debug} structure with
an identification of the @emph{activation record}
of the function executing at a given level.
@N{Level 0} is the current running function,
whereas level @M{n+1} is the function that has called level @M{n}.
When there are no errors, @Lid{lua_getstack} returns 1;
when called with a level greater than the stack depth,
it returns 0.

}

@APIEntry{const char *lua_getupvalue (lua_State *L, int funcindex, int n);|
@apii{0,0|1,-}

Gets information about a closure's upvalue.
(For Lua functions,
upvalues are the external local variables that the function uses,
and that are consequently included in its closure.)
@Lid{lua_getupvalue} gets the index @id{n} of an upvalue,
pushes the upvalue's value onto the stack,
and returns its name.
@id{funcindex} points to the closure in the stack.
(Upvalues have no particular order,
as they are active through the whole function.
So, they are numbered in an arbitrary order.)

Returns @id{NULL} (and pushes nothing)
when the index is greater than the number of upvalues.
For @N{C functions}, this function uses the empty string @T{""}
as a name for all upvalues.

}

@APIEntry{typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);|

Type for debugging hook functions.

Whenever a hook is called, its @id{ar} argument has its field
@id{event} set to the specific event that triggered the hook.
Lua identifies these events with the following constants:
@defid{LUA_HOOKCALL}, @defid{LUA_HOOKRET},
@defid{LUA_HOOKTAILRET}, @defid{LUA_HOOKLINE},
and @defid{LUA_HOOKCOUNT}.
Moreover, for line events, the field @id{currentline} is also set.
To get the value of any other field in @id{ar},
the hook must call @Lid{lua_getinfo}.
For return events, @id{event} can be @id{LUA_HOOKRET},
the normal value, or @id{LUA_HOOKTAILRET}.
In the latter case, Lua is simulating a return from
a function that did a tail call;
in this case, it is useless to call @Lid{lua_getinfo}.

While Lua is running a hook, it disables other calls to hooks.
Therefore, if a hook calls back Lua to execute a function or a chunk,
this execution occurs without any calls to hooks.

}

@APIEntry{int lua_sethook (lua_State *L, lua_Hook f, int mask, int count);|
@apii{0,0,-}

Sets the debugging hook function.

Argument @id{f} is the hook function.
@id{mask} specifies on which events the hook will be called:
it is formed by a bitwise or of the constants
@defid{LUA_MASKCALL},
@defid{LUA_MASKRET},
@defid{LUA_MASKLINE},
and @defid{LUA_MASKCOUNT}.
The @id{count} argument is only meaningful when the mask
includes @id{LUA_MASKCOUNT}.
For each event, the hook is called as explained below:
@description{

@item{The call hook| is called when the interpreter calls a function.
The hook is called just after Lua enters the new function,
before the function gets its arguments.
}

@item{The return hook| is called when the interpreter returns from a function.
The hook is called just before Lua leaves the function.
You have no access to the values to be returned by the function.
}

@item{The line hook| is called when the interpreter is about to
start the execution of a new line of code,
or when it jumps back in the code (even to the same line).
(This event only happens while Lua is executing a Lua function.)
}

@item{The count hook| is called after the interpreter executes every
@T{count} instructions.
(This event only happens while Lua is executing a Lua function.)
}

}

A hook is disabled by setting @id{mask} to zero.

}

@APIEntry{const char *lua_setlocal (lua_State *L, lua_Debug *ar, int n);|
@apii{0|1,0,-}

Sets the value of a local variable of a given activation record.
Parameters @id{ar} and @id{n} are as in @Lid{lua_getlocal}
@seeC{lua_getlocal}.
@Lid{lua_setlocal} assigns the value at the top of the stack
to the variable and returns its name.
It also pops the value from the stack.

Returns @id{NULL} (and pops nothing)
when the index is greater than
the number of active local variables.

}

@APIEntry{const char *lua_setupvalue (lua_State *L, int funcindex, int n);|
@apii{0|1,0,-}

Sets the value of a closure's upvalue.
It assigns the value at the top of the stack
to the upvalue and returns its name.
It also pops the value from the stack.
Parameters @id{funcindex} and @id{n} are as in the @Lid{lua_getupvalue}
@seeC{lua_getupvalue}.

Returns @id{NULL} (and pops nothing)
when the index is greater than the number of upvalues.

}

}

}


@C{-------------------------------------------------------------------------}
@sect1{@title{The Auxiliary Library}

@index{lauxlib.h}
The @def{auxiliary library} provides several convenient functions
to interface C with Lua.
While the basic API provides the primitive functions for all 
interactions between C and Lua,
the auxiliary library provides higher-level functions for some
common tasks.

All functions from the auxiliary library
are defined in header file @id{lauxlib.h} and
have a prefix @id{luaL_}.

All functions in the auxiliary library are built on
top of the basic API,
and so they provide nothing that cannot be done with this API.

Several functions in the auxiliary library are used to
check @N{C function} arguments.
Their names are always @id{luaL_check*} or @id{luaL_opt*}.
All of these functions throw an error if the check is not satisfied.
Because the error message is formatted for arguments
(e.g., @St{bad argument #1}),
you should not use these functions for other stack values.


@sect2{@title{Functions and Types}

Here we list all functions and types from the auxiliary library
in alphabetical order.


@APIEntry{void luaL_addchar (luaL_Buffer *B, char c);|
@apii{0,0,m}

Adds the character @id{c} to the buffer @id{B}
@seeC{luaL_Buffer}.

}

@APIEntry{void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l);|
@apii{0,0,m}

Adds the string pointed to by @id{s} with length @id{l} to
the buffer @id{B}
@seeC{luaL_Buffer}.
The string may contain embedded zeros.

}

@APIEntry{void luaL_addsize (luaL_Buffer *B, size_t n);|
@apii{0,0,m}

Adds to the buffer @id{B} @seeC{luaL_Buffer}
a string of length @id{n} previously copied to the
buffer area @seeC{luaL_prepbuffer}.

}

@APIEntry{void luaL_addstring (luaL_Buffer *B, const char *s);|
@apii{0,0,m}

Adds the zero-terminated string pointed to by @id{s}
to the buffer @id{B}
@seeC{luaL_Buffer}.
The string may not contain embedded zeros.

}

@APIEntry{void luaL_addvalue (luaL_Buffer *B);|
@apii{1,0,m}

Adds the value at the top of the stack
to the buffer @id{B}
@seeC{luaL_Buffer}.
Pops the value.

This is the only function on string buffers that can (and must)
be called with an extra element on the stack,
which is the value to be added to the buffer.

}

@APIEntry{
void luaL_argcheck (lua_State *L,
                    int cond,
                    int narg,
                    const char *extramsg);
|
@apii{0,0,v}

Checks whether @id{cond} is true.
If not, raises an error with the following message,
where @id{func} is retrieved from the call stack:
@verbatim{
bad argument #<narg> to <func> (<extramsg>)
}

}

@APIEntry{int luaL_argerror (lua_State *L, int narg, const char *extramsg);|
@apii{0,0,v}

Raises an error with the following message,
where @id{func} is retrieved from the call stack:
@verbatim{
bad argument #<narg> to <func> (<extramsg>)
}

This function never returns,
but it is an idiom to use it in @N{C functions}
as @T{return luaL_argerror(@rep{args})}.

}

@APIEntry{typedef struct luaL_Buffer luaL_Buffer;|

Type for a @def{string buffer}.

A string buffer allows @N{C code} to build Lua strings piecemeal.
Its pattern of use is as follows:
@itemize{

@item{First you declare a variable @id{b} of type @Lid{luaL_Buffer}.}

@item{Then you initialize it with a call @T{luaL_buffinit(L, &b)}.}

@item{
Then you add string pieces to the buffer calling any of
the @id{luaL_add*} functions.
}

@item{
You finish by calling @T{luaL_pushresult(&b)}.
This call leaves the final string on the top of the stack.
}

}

During its normal operation,
a string buffer uses a variable number of stack slots.
So, while using a buffer, you cannot assume that you know where
the top of the stack is.
You can use the stack between successive calls to buffer operations
as long as that use is balanced;
that is,
when you call a buffer operation,
the stack is at the same level
it was immediately after the previous buffer operation.
(The only exception to this rule is @Lid{luaL_addvalue}.)
After calling @Lid{luaL_pushresult} the stack is back to its
level when the buffer was initialized,
plus the final string on its top.

}

@APIEntry{void luaL_buffinit (lua_State *L, luaL_Buffer *B);|
@apii{0,0,-}

Initializes a buffer @id{B}.
This function does not allocate any space;
the buffer must be declared as a variable
@seeC{luaL_Buffer}.

}

@APIEntry{int luaL_callmeta (lua_State *L, int obj, const char *e);|
@apii{0,0|1,e}

Calls a metamethod.

If the object at index @id{obj} has a metatable and this
metatable has a field @id{e},
this function calls this field and passes the object as its only argument.
In this case this function returns 1 and pushes onto the
stack the value returned by the call.
If there is no metatable or no metamethod,
this function returns 0 (without pushing any value on the stack).

}

@APIEntry{void luaL_checkany (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function has an argument
of any type (including @nil) at position @id{narg}.

}

@APIEntry{int luaL_checkint (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a number
and returns this number cast to an @id{int}.

}

@APIEntry{lua_Integer luaL_checkinteger (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a number
and returns this number cast to a @Lid{lua_Integer}.

}

@APIEntry{long luaL_checklong (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a number
and returns this number cast to a @id{long}.

}

@APIEntry{const char *luaL_checklstring (lua_State *L, int narg, size_t *l);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a string
and returns this string;
if @id{l} is not @id{NULL} fills @T{*l}
with the string's length.

This function uses @Lid{lua_tolstring} to get its result,
so all conversions and caveats of that function apply here.

}

@APIEntry{lua_Number luaL_checknumber (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a number
and returns this number.

}

@APIEntry{
int luaL_checkoption (lua_State *L,
                      int narg,
                      const char *def,
                      const char *const lst[]);
|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a string and
searches for this string in the array @id{lst}
(which must be NULL-terminated).
Returns the index in the array where the string was found.
Raises an error if the argument is not a string or
if the string cannot be found.

If @id{def} is not @id{NULL},
the function uses @id{def} as a default value when
there is no argument @id{narg} or if this argument is @nil.

This is a useful function for mapping strings to @N{C enums}.
(The usual convention in Lua libraries is
to use strings instead of numbers to select options.)

}

@APIEntry{void luaL_checkstack (lua_State *L, int sz, const char *msg);|
@apii{0,0,v}

Grows the stack size to @T{top + sz} elements,
raising an error if the stack cannot grow to that size.
@id{msg} is an additional text to go into the error message.

}

@APIEntry{const char *luaL_checkstring (lua_State *L, int narg);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a string
and returns this string.

This function uses @Lid{lua_tolstring} to get its result,
so all conversions and caveats of that function apply here.

}

@APIEntry{void luaL_checktype (lua_State *L, int narg, int t);|
@apii{0,0,v}

Checks whether the function argument @id{narg} has type @id{t}.
See @Lid{lua_type} for the encoding of types for @id{t}.

}

@APIEntry{void *luaL_checkudata (lua_State *L, int narg, const char *tname);|
@apii{0,0,v}

Checks whether the function argument @id{narg} is a userdata
of the type @id{tname} @seeC{luaL_newmetatable}.

}

@APIEntry{int luaL_dofile (lua_State *L, const char *filename);|
@apii{0,?,m}

Loads and runs the given file.
It is defined as the following macro:
@verbatim{
(luaL_loadfile(L, filename) || lua_pcall(L, 0, LUA_MULTRET, 0))
}
It returns 0 if there are no errors
or 1 in case of errors.

}

@APIEntry{int luaL_dostring (lua_State *L, const char *str);|
@apii{0,?,m}

Loads and runs the given string.
It is defined as the following macro:
@verbatim{
(luaL_loadstring(L, str) || lua_pcall(L, 0, LUA_MULTRET, 0))
}
It returns 0 if there are no errors
or 1 in case of errors.

}

@APIEntry{int luaL_error (lua_State *L, const char *fmt, ...);|
@apii{0,0,v}

Raises an error.
The error message format is given by @id{fmt}
plus any extra arguments,
following the same rules of @Lid{lua_pushfstring}.
It also adds at the beginning of the message the file name and
the line number where the error occurred,
if this information is available.

This function never returns,
but it is an idiom to use it in @N{C functions}
as @T{return luaL_error(@rep{args})}.

}

@APIEntry{int luaL_getmetafield (lua_State *L, int obj, const char *e);|
@apii{0,0|1,m}

Pushes onto the stack the field @id{e} from the metatable
of the object at index @id{obj}.
If the object does not have a metatable,
or if the metatable does not have this field,
returns 0 and pushes nothing.

}

@APIEntry{void luaL_getmetatable (lua_State *L, const char *tname);|
@apii{0,1,-}

Pushes onto the stack the metatable associated with name @id{tname}
in the registry @seeC{luaL_newmetatable}.

}

@APIEntry{
const char *luaL_gsub (lua_State *L,
                       const char *s,
                       const char *p,
                       const char *r);
|
@apii{0,1,m}

Creates a copy of string @id{s} by replacing
any occurrence of the string @id{p}
with the string @id{r}.
Pushes the resulting string on the stack and returns it.

}

@APIEntry{
int luaL_loadbuffer (lua_State *L,
                     const char *buff,
                     size_t sz,
                     const char *name);
|
@apii{0,1,m}

Loads a buffer as a Lua chunk.
This function uses @Lid{lua_load} to load the chunk in the
buffer pointed to by @id{buff} with size @id{sz}.

This function returns the same results as @Lid{lua_load}.
@id{name} is the chunk name,
used for debug information and error messages.

}

@APIEntry{int luaL_loadfile (lua_State *L, const char *filename);|
@apii{0,1,m}

Loads a file as a Lua chunk.
This function uses @Lid{lua_load} to load the chunk in the file
named @id{filename}.
If @id{filename} is @id{NULL},
then it loads from the standard input.
The first line in the file is ignored if it starts with a @T{#}.

This function returns the same results as @Lid{lua_load},
but it has an extra error code @defid{LUA_ERRFILE}
if it cannot open/read the file.

As @Lid{lua_load}, this function only loads the chunk;
it does not run it.

}

@APIEntry{int luaL_loadstring (lua_State *L, const char *s);|
@apii{0,1,m}

Loads a string as a Lua chunk.
This function uses @Lid{lua_load} to load the chunk in
the zero-terminated string @id{s}.

This function returns the same results as @Lid{lua_load}.

Also as @Lid{lua_load}, this function only loads the chunk;
it does not run it.

}

@APIEntry{int luaL_newmetatable (lua_State *L, const char *tname);|
@apii{0,1,m}

If the registry already has the key @id{tname},
returns 0.
Otherwise,
creates a new table to be used as a metatable for userdata,
adds it to the registry with key @id{tname},
and returns 1.

In both cases pushes onto the stack the final value associated
with @id{tname} in the registry.

}

@APIEntry{lua_State *luaL_newstate (void);|
@apii{0,0,-}

Creates a new Lua state.
It calls @Lid{lua_newstate} with an
allocator based on the @N{standard C} @id{realloc} function
and then sets a panic function @seeC{lua_atpanic} that prints
an error message to the standard error output in case of fatal
errors.

Returns the new state,
or @id{NULL} if there is a memory allocation error.

}

@APIEntry{void luaL_openlibs (lua_State *L);|
@apii{0,0,m}

Opens all standard Lua libraries into the given state.

}

@APIEntry{int luaL_optint (lua_State *L, int narg, int d);|
@apii{0,0,v}

If the function argument @id{narg} is a number,
returns this number cast to an @id{int}.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

}

@APIEntry{
lua_Integer luaL_optinteger (lua_State *L,
                             int narg,
                             lua_Integer d);
|
@apii{0,0,v}

If the function argument @id{narg} is a number,
returns this number cast to a @Lid{lua_Integer}.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

}

@APIEntry{long luaL_optlong (lua_State *L, int narg, long d);|
@apii{0,0,v}

If the function argument @id{narg} is a number,
returns this number cast to a @id{long}.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

}

@APIEntry{
const char *luaL_optlstring (lua_State *L,
                             int narg,
                             const char *d,
                             size_t *l);
|
@apii{0,0,v}

If the function argument @id{narg} is a string,
returns this string.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

If @id{l} is not @id{NULL},
fills the position @T{*l} with the results's length.

}

@APIEntry{lua_Number luaL_optnumber (lua_State *L, int narg, lua_Number d);|
@apii{0,0,v}

If the function argument @id{narg} is a number,
returns this number.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

}

@APIEntry{
const char *luaL_optstring (lua_State *L,
                            int narg,
                            const char *d);
|
@apii{0,0,v}

If the function argument @id{narg} is a string,
returns this string.
If this argument is absent or is @nil,
returns @id{d}.
Otherwise, raises an error.

}

@APIEntry{char *luaL_prepbuffer (luaL_Buffer *B);|
@apii{0,0,-}

Returns an address to a space of size @defid{LUAL_BUFFERSIZE}
where you can copy a string to be added to buffer @id{B}
@seeC{luaL_Buffer}.
After copying the string into this space you must call
@Lid{luaL_addsize} with the size of the string to actually add 
it to the buffer.

}

@APIEntry{void luaL_pushresult (luaL_Buffer *B);|
@apii{?,1,m}

Finishes the use of buffer @id{B} leaving the final string on
the top of the stack.

}

@APIEntry{int luaL_ref (lua_State *L, int t);|
@apii{1,0,m}

Creates and returns a @def{reference},
in the table at index @id{t},
for the object at the top of the stack (and pops the object).

A reference is a unique integer key.
As long as you do not manually add integer keys into table @id{t},
@Lid{luaL_ref} ensures the uniqueness of the key it returns.
You can retrieve an object referred by reference @id{r}
by calling @T{lua_rawgeti(L, t, r)}.
Function @Lid{luaL_unref} frees a reference and its associated object.

If the object at the top of the stack is @nil,
@Lid{luaL_ref} returns the constant @defid{LUA_REFNIL}.
The constant @defid{LUA_NOREF} is guaranteed to be different
from any reference returned by @Lid{luaL_ref}.

}

@APIEntry{
typedef struct luaL_Reg {
  const char *name;
  lua_CFunction func;
} luaL_Reg;
|

Type for arrays of functions to be registered by
@Lid{luaL_register}.
@id{name} is the function name and @id{func} is a pointer to
the function.
Any array of @Lid{luaL_Reg} must end with an sentinel entry
in which both @id{name} and @id{func} are @id{NULL}.

}

@APIEntry{
void luaL_register (lua_State *L,
                    const char *libname,
                    const luaL_Reg *l);
|
@apii{0|1,1,m}

Opens a library.

When called with @id{libname} equal to @id{NULL},
it simply registers all functions in the list @id{l}
@seeC{luaL_Reg} into the table on the top of the stack.

When called with a non-null @id{libname},
@id{luaL_register} creates a new table @id{t},
sets it as the value of the global variable @id{libname},
sets it as the value of @T{package.loaded[libname]},
and registers on it all functions in the list @id{l}.
If there is a table in @T{package.loaded[libname]} or in
variable @id{libname},
reuses this table instead of creating a new one.

In any case the function leaves the table
on the top of the stack.

}

@APIEntry{const char *luaL_typename (lua_State *L, int index);|
@apii{0,0,-}

Returns the name of the type of the value at the given index.

}

@APIEntry{int luaL_typerror (lua_State *L, int narg, const char *tname);|
@apii{0,0,v}

Generates an error with a message like the following:
@verbatim{
@rep{location}: bad argument @rep{narg} to '@rep{func}' (@rep{tname} expected, got @rep{rt})
}
where @T{@rep{location}} is produced by @Lid{luaL_where},
@T{@rep{func}} is the name of the current function,
and @T{@rep{rt}} is the type name of the actual argument.

}

@APIEntry{void luaL_unref (lua_State *L, int t, int ref);|
@apii{0,0,-}

Releases reference @id{ref} from the table at index @id{t}
@seeC{luaL_ref}.
The entry is removed from the table,
so that the referred object can be collected.
The reference @id{ref} is also freed to be used again.

If @id{ref} is @Lid{LUA_NOREF} or @Lid{LUA_REFNIL},
@Lid{luaL_unref} does nothing.

}

@APIEntry{void luaL_where (lua_State *L, int lvl);|
@apii{0,1,m}

Pushes onto the stack a string identifying the current position
of the control at level @id{lvl} in the call stack.
Typically this string has the following format:
@verbatim{
@rep{chunkname}:@rep{currentline}:
}
@N{Level 0} is the running function,
@N{level 1} is the function that called the running function,
etc.

This function is used to build a prefix for error messages.

}

}

}


@C{-------------------------------------------------------------------------}
@sect1{libraries| @title{Standard Libraries}

The standard Lua libraries provide useful functions
that are implemented directly through the @N{C API}.
Some of these functions provide essential services to the language
(e.g., @Lid{type} and @Lid{getmetatable});
others provide access to @Q{outside} services (e.g., I/O);
and others could be implemented in Lua itself,
but are quite useful or have critical performance requirements that
deserve an implementation in C (e.g., @Lid{table.sort}).

All libraries are implemented through the official @N{C API}
and are provided as separate @N{C modules}.
Currently, Lua has the following standard libraries:
@itemize{

@item{basic library, which includes the coroutine sub-library;}

@item{package library;}

@item{string manipulation;}

@item{table manipulation;}

@item{mathematical functions (sin, log, etc.);}

@item{input and output;}

@item{operating system facilities;}

@item{debug facilities.}

}
Except for the basic and package libraries,
each library provides all its functions as fields of a global table
or as methods of its objects.

To have access to these libraries,
the @N{C host} program should call the @Lid{luaL_openlibs} function,
which opens all standard libraries.
Alternatively,
it can open them individually by calling
@defid{luaopen_base} (for the basic library),
@defid{luaopen_package} (for the package library),
@defid{luaopen_string} (for the string library),
@defid{luaopen_table} (for the table library),
@defid{luaopen_math} (for the mathematical library),
@defid{luaopen_io} (for the I/O library),
@defid{luaopen_os} (for the Operating System library),
and @defid{luaopen_debug} (for the debug library).
These functions are declared in @defid{lualib.h}
and should not be called directly:
you must call them like any other Lua @N{C function},
e.g., by using @Lid{lua_call}.

@sect2{predefined| @title{Basic Functions}

The basic library provides some core functions to Lua.
If you do not include this library in your application,
you should check carefully whether you need to provide 
implementations for some of its facilities.


@LibEntry{assert (v [, message])|
Issues an  error when
the value of its argument @id{v} is false (i.e., @nil or @false);
otherwise, returns all its arguments.
@id{message} is an error message;
when absent, it defaults to @Q{assertion failed!}

}

@LibEntry{collectgarbage ([opt [, arg]])|

This function is a generic interface to the garbage collector.
It performs different functions according to its first argument, @id{opt}:
@description{

@item{@Q{collect}|
performs a full garbage-collection cycle.
This is the default option.
}

@item{@Q{stop}|
stops the garbage collector.
}

@item{@Q{restart}|
restarts the garbage collector.
}

@item{@Q{count}|
returns the total memory in use by Lua (in Kbytes).
}

@item{@Q{step}|
performs a garbage-collection step.
The step @Q{size} is controlled by @id{arg}
(larger values mean more steps) in a non-specified way.
If you want to control the step size
you must experimentally tune the value of @id{arg}.
Returns @Rw{true} if the step finished a collection cycle.
}

@item{@Q{setpause}|
sets @id{arg} as the new value for the @emph{pause} of
the collector @see{GC}.
Returns the previous value for @emph{pause}.
}

@item{@Q{setstepmul}|
sets @id{arg} as the new value for the @emph{step multiplier} of
the collector @see{GC}.
Returns the previous value for @emph{step}.
}

}

}

@LibEntry{dofile ([filename])|
Opens the named file and executes its contents as a Lua chunk.
When called without arguments,
@id{dofile} executes the contents of the standard input (@id{stdin}).
Returns all values returned by the chunk.
In case of errors, @id{dofile} propagates the error
to its caller (that is, @id{dofile} does not run in protected mode).

}

@LibEntry{error (message [, level])|
Terminates the last protected function called
and returns @id{message} as the error message.
Function @id{error} never returns.

Usually, @id{error} adds some information about the error position
at the beginning of the message.
The @id{level} argument specifies how to get the error position.
With @N{level 1} (the default), the error position is where the
@id{error} function was called.
@N{Level 2} points the error to where the function
that called @id{error} was called; and so on.
Passing a @N{level 0} avoids the addition of error position information
to the message.

}

@LibEntry{_G|
A global variable (not a function) that
holds the global environment (that is, @T{_G._G = _G}).
Lua itself does not use this variable;
changing its value does not affect any environment,
nor vice-versa.
(Use @Lid{setfenv} to change environments.)

}

@LibEntry{getfenv ([f])|
Returns the current environment in use by the function.
@id{f} can be a Lua function or a number
that specifies the function at that stack level:
@N{Level 1} is the function calling @id{getfenv}.
If the given function is not a Lua function,
or if @id{f} is 0,
@id{getfenv} returns the global environment.
The default for @id{f} is 1.

}

@LibEntry{getmetatable (object)|

If @id{object} does not have a metatable, returns @nil.
Otherwise,
if the object's metatable has a @T{"__metatable"} field,
returns the associated value.
Otherwise, returns the metatable of the given object.

}

@LibEntry{ipairs (t)|

Returns three values: an iterator function, the table @id{t}, and 0,
so that the construction
@verbatim{
for i,v in ipairs(t) do @rep{body} end
}
will iterate over the pairs (@T{1,t[1]}), (@T{2,t[2]}), @Cdots,
up to the first integer key absent from the table.

}

@LibEntry{load (func [, chunkname])|

Loads a chunk using function @id{func} to get its pieces.
Each call to @id{func} must return a string that concatenates
with previous results.
A return of an empty string, @nil, or no value signals the end of the chunk.

If there are no errors, 
returns the compiled chunk as a function;
otherwise, returns @nil plus the error message.
The environment of the returned function is the global environment.

@id{chunkname} is used as the chunk name for error messages
and debug information.
When absent,
it defaults to @St{=(load)}.

}

@LibEntry{loadfile ([filename])|

Similar to @Lid{load},
but gets the chunk from file @id{filename}
or from the standard input,
if no file name is given.

}

@LibEntry{loadstring (string [, chunkname])|

Similar to @Lid{load},
but gets the chunk from the given string.

To load and run a given string, use the idiom
@verbatim{
assert(loadstring(s))()
}

When absent,
@id{chunkname} defaults to the given string.

}

@LibEntry{next (table [, index])|

Allows a program to traverse all fields of a table.
Its first argument is a table and its second argument
is an index in this table.
@id{next} returns the next index of the table
and its associated value.
When called with @nil as its second argument,
@id{next} returns an initial index
and its associated value.
When called with the last index,
or with @nil in an empty table,
@id{next} returns @nil.
If the second argument is absent, then it is interpreted as @nil.
In particular,
you can use @T{next(t)} to check whether a table is empty.

The order in which the indices are enumerated is not specified,
@emph{even for numeric indices}.
(To traverse a table in numeric order,
use a numerical @Rw{for} or the @Lid{ipairs} function.)

The behavior of @id{next} is @emph{undefined} if,
during the traversal,
you assign any value to a non-existent field in the table.
You may however modify existing fields.
In particular, you may clear existing fields.

}

@LibEntry{pairs (t)|

Returns three values: the @Lid{next} function, the table @id{t}, and @nil,
so that the construction
@verbatim{
for k,v in pairs(t) do @rep{body} end
}
will iterate over all key@En{}value pairs of table @id{t}.

See function @Lid{next} for the caveats of modifying
the table during its traversal.

}

@LibEntry{pcall (f, arg1, @Cdots)|

Calls function @id{f} with
the given arguments in @emph{protected mode}.
This means that any error @N{inside @T{f}} is not propagated;
instead, @id{pcall} catches the error
and returns a status code.
Its first result is the status code (a boolean),
which is true if the call succeeds without errors.
In such case, @id{pcall} also returns all results from the call,
after this first result.
In case of any error, @id{pcall} returns @false plus the error message.

}

@LibEntry{print (@Cdots)|
Receives any number of arguments,
and prints their values to @id{stdout},
using the @Lid{tostring} function to convert them to strings.
@id{print} is not intended for formatted output,
but only as a quick way to show a value,
typically for debugging.
For formatted output, use @Lid{string.format}.

}

@LibEntry{rawequal (v1, v2)|
Checks whether @id{v1} is equal to @id{v2},
without invoking any metamethod.
Returns a boolean.

}

@LibEntry{rawget (table, index)|
Gets the real value of @T{table[index]},
without invoking any metamethod.
@id{table} must be a table;
@id{index} may be any value.

}

@LibEntry{rawset (table, index, value)|
Sets the real value of @T{table[index]} to @id{value},
without invoking any metamethod.
@id{table} must be a table,
@id{index} any value different from @nil,
and @id{value} any Lua value.

This function returns @id{table}.

}

@LibEntry{select (index, @Cdots)|

If @id{index} is a number,
returns all arguments after argument number @id{index}.
Otherwise, @id{index} must be the string @T{"#"},
and @id{select} returns the total number of extra arguments it received.

}

@LibEntry{setfenv (f, table)|

Sets the environment to be used by the given function.
@id{f} can be a Lua function or a number
that specifies the function at that stack level:
@N{Level 1} is the function calling @id{setfenv}.
@id{setfenv} returns the given function.

As a special case, when @id{f} is 0 @id{setfenv} changes
the environment of the running thread.
In this case, @id{setfenv} returns no values.

}

@LibEntry{setmetatable (table, metatable)|

Sets the metatable for the given table.
(You cannot change the metatable of other types from Lua, only @N{from C}.)
If @id{metatable} is @nil,
removes the metatable of the given table.
If the original metatable has a @T{"__metatable"} field,
raises an error.

This function returns @id{table}.

}

@LibEntry{tonumber (e [, base])|
Tries to convert its argument to a number.
If the argument is already a number or a string convertible
to a number, then @id{tonumber} returns this number;
otherwise, it returns @nil.

An optional argument specifies the base to interpret the numeral.
The base may be any integer between 2 and 36, inclusive.
In bases @N{above 10}, the letter @Char{A} (in either upper or lower case)
@N{represents 10}, @Char{B} @N{represents 11}, and so forth,
with @Char{Z} representing 35.
In base 10 (the default), the number can have a decimal part,
as well as an optional exponent part @see{lexical}.
In other bases, only unsigned integers are accepted.

}

@LibEntry{tostring (e)|
Receives an argument of any type and
converts it to a string in a reasonable format.
For complete control of how numbers are converted,
use @Lid{string.format}.

If the metatable of @id{e} has a @T{"__tostring"} field,
then @id{tostring} calls the corresponding value
with @id{e} as argument,
and uses the result of the call as its result.

}

@LibEntry{type (v)|
Returns the type of its only argument, coded as a string.
The possible results of this function are
@St{nil} (a string, not the value @nil),
@St{number},
@St{string},
@St{boolean},
@St{table},
@St{function},
@St{thread},
and @St{userdata}.

}

@LibEntry{unpack (list [, i [, j]])|
Returns the elements from the given table.
This function is equivalent to
@verbatim{
return list[i], list[i+1], @Cdots, list[j]
}
except that the above code can be written only for a fixed number
of elements.
By default, @id{i} @N{is 1} and @id{j} is the length of the list,
as defined by the length operator @see{len-op}.

}

@LibEntry{_VERSION|
A global variable (not a function) that
holds a string containing the current interpreter version.
The current contents of this variable is @St{Lua 5.1}.

}

@LibEntry{xpcall (f, err)|

This function is similar to @Lid{pcall},
except that you can set a new error handler.

@id{xpcall} calls function @id{f} in protected mode,
using @id{err} as the error handler.
Any error inside @id{f} is not propagated;
instead, @id{xpcall} catches the error,
calls the @id{err} function with the original error object,
and returns a status code.
Its first result is the status code (a boolean),
which is true if the call succeeds without errors.
In this case, @id{xpcall} also returns all results from the call,
after this first result.
In case of any error,
@id{xpcall} returns @false plus the result from @id{err}.

}

}

@sect2{@title{Coroutine Manipulation}

The operations related to coroutines comprise a sub-library of
the basic library and come inside the table @defid{coroutine}.
See @See{coroutine} for a general description of coroutines.


@LibEntry{coroutine.create (f)|

Creates a new coroutine, with body @id{f}.
@id{f} must be a Lua function.
Returns this new coroutine,
an object with type @T{"thread"}.

}

@LibEntry{coroutine.resume (co [, val1, @Cdots])|

Starts or continues the execution of coroutine @id{co}.
The first time you resume a coroutine,
it starts running its body.
The values @id{val1}, @Cdots are passed
as the arguments to the body function.
If the coroutine has yielded,
@id{resume} restarts it;
the values @id{val1}, @Cdots are passed
as the results from the yield.

If the coroutine runs without any errors,
@id{resume} returns @true plus any values passed to @id{yield}
(if the coroutine yields) or any values returned by the body function
(if the coroutine terminates).
If there is any error,
@id{resume} returns @false plus the error message.

}

@LibEntry{coroutine.running ()|

Returns the running coroutine,
or @nil when called by the main thread.

}

@LibEntry{coroutine.status (co)|

Returns the status of coroutine @id{co}, as a string:
@T{"running"},
if the coroutine is running (that is, it called @id{status});
@T{"suspended"}, if the coroutine is suspended in a call to @id{yield},
or if it has not started running yet;
@T{"normal"} if the coroutine is active but not running
(that is, it has resumed another coroutine);
and @T{"dead"} if the coroutine has finished its body function,
or if it has stopped with an error.

}

@LibEntry{coroutine.wrap (f)|

Creates a new coroutine, with body @id{f}.
@id{f} must be a Lua function.
Returns a function that resumes the coroutine each time it is called.
Any arguments passed to the function behave as the
extra arguments to @id{resume}.
Returns the same values returned by @id{resume},
except the first boolean.
In case of error, propagates the error.

}

@LibEntry{coroutine.yield (@Cdots)|

Suspends the execution of the calling coroutine.
The coroutine cannot be running a @N{C function},
a metamethod, or an iterator.
Any arguments to @id{yield} are passed as extra results to @id{resume}.

}

}

@sect2{@title{Modules}

The package library provides basic
facilities for loading and building modules in Lua.
It exports two of its functions directly in the global environment:
@Lid{require} and @Lid{module}.
Everything else is exported in a table @defid{package}.


@LibEntry{module (name [, @Cdots])|

Creates a module.
If there is a table in @T{package.loaded[name]},
this table is the module.
Otherwise, if there is a global table @id{t} with the given name,
this table is the module.
Otherwise creates a new table @id{t} and
sets it as the value of the global @id{name} and
the value of @T{package.loaded[name]}.
This function also initializes @id{t._NAME} with the given name,
@id{t._M} with the module (@id{t} itself),
and @id{t._PACKAGE} with the package name
(the full module name minus last component; see below).
Finally, @id{module} sets @id{t} as the new environment
of the current function and the new value of @T{package.loaded[name]},
so that @Lid{require} returns @id{t}.

If @id{name} is a compound name
(that is, one with components separated by dots),
@id{module} creates (or reuses, if they already exist)
tables for each component.
For instance, if @id{name} is @id{a.b.c},
then @id{module} stores the module table in field @id{c} of
field @id{b} of global @id{a}.

This function can receive optional @emph{options} after
the module name,
where each option is a function to be applied over the module.

}

@LibEntry{require (modname)|

Loads the given module.
The function starts by looking into the @Lid{package.loaded} table
to determine whether @id{modname} is already loaded.
If it is, then @id{require} returns the value stored
at @T{package.loaded[modname]}.
Otherwise, it tries to find a @emph{loader} for the module.

To find a loader,
@id{require} is guided by the @Lid{package.loaders} array.
By changing this array,
we can change how @id{require} looks for a module.
The following explanation is based on the default configuration
for @Lid{package.loaders}.

First @id{require} queries @T{package.preload[modname]}.
If it has a value,
this value (which should be a function) is the loader.
Otherwise @id{require} searches for a Lua loader using the
path stored in @Lid{package.path}.
If that also fails, it searches for a @N{C loader} using the
path stored in @Lid{package.cpath}.
If that also fails,
it tries an @emph{all-in-one} loader @see{pdf-package.loaders}.

Once a loader is found,
@id{require} calls the loader with a single argument, @id{modname}.
If the loader returns any value,
@id{require} assigns the returned value to @T{package.loaded[modname]}.
If the loader returns no value and
has not assigned any value to @T{package.loaded[modname]},
then @id{require} assigns @Rw{true} to this entry.
In any case, @id{require} returns the
final value of @T{package.loaded[modname]}.

If there is any error loading or running the module,
or if it cannot find any loader for the module,
then @id{require} signals an error. 

}

@LibEntry{package.cpath|

The path used by @Lid{require} to search for a @N{C loader}.

Lua initializes the @N{C path} @Lid{package.cpath} in the same way
it initializes the Lua path @Lid{package.path},
using the environment variable @defid{LUA_CPATH}
or a default path defined in @id{luaconf.h}.

}

@format{/pagebreak}
@LibEntry{package.loaded|

A table used by @Lid{require} to control which
modules are already loaded.
When you require a module @id{modname} and
@T{package.loaded[modname]} is not false,
@Lid{require} simply returns the value stored there.

}

@LibEntry{package.loaders|

A table used by @Lid{require} to control how to load modules.

Each entry in this table is a @def{searcher function}.
When looking for a module,
@Lid{require} calls each of these searchers in ascending order,
with the module name (the argument given to @Lid{require}) as its
sole parameter.
The function can return another function (the module @def{loader})
or a string explaining why it did not find that module
(or @nil if it has nothing to say).
Lua initializes this table with four functions.

The first searcher simply looks for a loader in the
@Lid{package.preload} table.

The second searcher looks for a loader as a Lua library,
using the path stored at @Lid{package.path}.
A path is a sequence of @emph{templates} separated by semicolons.
For each template,
the searcher will change each interrogation
mark in the template by @id{filename},
which is the module name with each dot replaced by a
@Q{directory separator} (such as @St{/} in Unix);
then it will try to open the resulting file name.
So, for instance, if the Lua path is the string
@verbatim{
"./?.lua;./?.lc;/usr/local/?/init.lua"
}
the search for a Lua file for module @id{foo}
will try to open the files
@T{./foo.lua}, @T{./foo.lc}, and
@T{/usr/local/foo/init.lua}, in that order.

The third searcher looks for a loader as a @N{C library},
using the path given by the variable @Lid{package.cpath}.
For instance,
if the @N{C path} is the string
@verbatim{
"./?.so;./?.dll;/usr/local/?/init.so"
}
the searcher for module @id{foo}
will try to open the files @T{./foo.so}, @T{./foo.dll},
and @T{/usr/local/foo/init.so}, in that order.
Once it finds a @N{C library},
this searcher first uses a dynamic link facility to link the
application with the library.
Then it tries to find a @N{C function} inside the library to
be used as the loader.
The name of this @N{C function} is the string @St{luaopen_}
concatenated with a copy of the module name where each dot
is replaced by an underscore.
Moreover, if the module name has a hyphen,
its prefix up to (and including) the first hyphen is removed.
For instance, if the module name is @id{a.v1-b.c},
the function name will be @id{luaopen_b_c}.

The fourth searcher tries an @def{all-in-one loader}.
It searches the @N{C path} for a library for
the root name of the given module.
For instance, when requiring @id{a.b.c},
it will search for a @N{C library} for @id{a}.
If found, it looks into it for an open function for
the submodule;
in our example, that would be @id{luaopen_a_b_c}.
With this facility, a package can pack several @N{C submodules}
into one single library,
with each submodule keeping its original open function.

}

@LibEntry{package.loadlib (libname, funcname)|

Dynamically links the host program with the @N{C library} @id{libname}.
Inside this library, looks for a function @id{funcname}
and returns this function as a @N{C function}.
(So, @id{funcname} must follow the protocol @seeC{lua_CFunction}).

This is a low-level function.
It completely bypasses the package and module system.
Unlike @Lid{require},
it does not perform any path searching and
does not automatically adds extensions.
@id{libname} must be the complete file name of the @N{C library},
including if necessary a path and extension.
@id{funcname} must be the exact name exported by the @N{C library}
(which may depend on the @N{C compiler} and linker used).

This function is not supported by ANSI C.
As such, it is only available on some platforms
(Windows, Linux, Mac OS X, Solaris, BSD,
plus other Unix systems that support the @id{dlfcn} standard).

}

@LibEntry{package.path|

The path used by @Lid{require} to search for a Lua loader.

At start-up, Lua initializes this variable with
the value of the environment variable @defid{LUA_PATH} or
with a default path defined in @id{luaconf.h},
if the environment variable is not defined.
Any @St{;;} in the value of the environment variable
is replaced by the default path.

}

@LibEntry{package.preload|

A table to store loaders for specific modules
@seeF{require}.

}

@LibEntry{package.seeall (module)|

Sets a metatable for @id{module} with
its @id{__index} field referring to the global environment,
so that this module inherits values
from the global environment.
To be used as an option to function @Lid{module}.

}

}

@sect2{@title{String Manipulation}

This library provides generic functions for string manipulation,
such as finding and extracting substrings, and pattern matching.
When indexing a string in Lua, the first character is at @N{position 1}
(not @N{at 0}, as in C).
Indices are allowed to be negative and are interpreted as indexing backwards,
from the end of the string.
Thus, the last character is at position @num{-1}, and so on.

The string library provides all its functions inside the table
@defid{string}.
It also sets a metatable for strings
where the @id{__index} field points to the @id{string} table.
Therefore, you can use the string functions in object-oriented style.
For instance, @T{string.byte(s, i)}
can be written as @T{s:byte(i)}.

The string library assumes one-byte character encodings.


@LibEntry{string.byte (s [, i [, j]])|
Returns the internal numerical codes of the characters @T{s[i]},
@T{s[i+1]}, @Cdots, @T{s[j]}.
The default value for @id{i} @N{is 1};
the default value for @id{j} @N{is @id{i}}.

Note that numerical codes are not necessarily portable across platforms.

}

@LibEntry{string.char (@Cdots)|
Receives zero or more integers.
Returns a string with length equal to the number of arguments,
in which each character has the internal numerical code equal
to its corresponding argument.

Note that numerical codes are not necessarily portable across platforms.

}

@LibEntry{string.dump (function)|

Returns a string containing a binary representation of the given function,
so that a later @Lid{loadstring} on this string returns
a copy of the function.
@id{function} must be a Lua function without upvalues.

}

@LibEntry{string.find (s, pattern [, init [, plain]])|
Looks for the first match of
@id{pattern} in the string @id{s}.
If it finds a match, then @id{find} returns the indices @N{of @T{s}}
where this occurrence starts and ends;
otherwise, it returns @nil.
A third, optional numerical argument @id{init} specifies
where to start the search;
its default value @N{is 1} and can be negative.
A value of @true as a fourth, optional argument @id{plain}
turns off the pattern matching facilities,
so the function does a plain @Q{find substring} operation,
with no characters in @id{pattern} being considered @Q{magic}.
Note that if @id{plain} is given, then @id{init} must be given as well.

If the pattern has captures,
then in a successful match
the captured values are also returned,
after the two indices.

}

@LibEntry{string.format (formatstring, @Cdots)|
Returns a formatted version of its variable number of arguments
following the description given in its first argument (which must be a string).
The format string follows the same rules as the @id{printf} family of
standard @N{C functions}.
The only differences are that the options/modifiers
@T{*}, @id{l}, @id{L}, @id{n}, @id{p},
and @id{h} are not supported
and that there is an extra option, @id{q}.
The @id{q} option formats a string in a form suitable to be safely read
back by the Lua interpreter:
the string is written between double quotes,
and all double quotes, newlines, embedded zeros,
and backslashes in the string
are correctly escaped when written.
For instance, the call
@verbatim{
string.format('%q', 'a string with "quotes" and \n new line')
}
will produce the string:
@verbatim{
"a string with \"quotes\" and \
 new line"
}

The options @id{c}, @id{d}, @id{E}, @id{e}, @id{f},
@id{g}, @id{G}, @id{i}, @id{o}, @id{u}, @id{X}, and @id{x} all
expect a number as argument,
whereas @id{q} and @id{s} expect a string.

This function does not accept string values
containing embedded zeros,
except as arguments to the @id{q} option.

}

@LibEntry{string.gmatch (s, pattern)|
Returns an iterator function that,
each time it is called,
returns the next captures from @id{pattern} over string @id{s}.
If @id{pattern} specifies no captures,
then the whole match is produced in each call.

As an example, the following loop
@verbatim{
s = "hello world from Lua"
for w in string.gmatch(s, "%a+") do
  print(w)
end
}
will iterate over all the words from string @id{s},
printing one per line.
The next example collects all pairs @T{key=value} from the
given string into a table:
@verbatim{
t = {}
s = "from=world, to=Lua"
for k, v in string.gmatch(s, "(%w+)=(%w+)") do
  t[k] = v
end
}

For this function, a @Char{^} at the start of a pattern does not
work as an anchor, as this would prevent the iteration.

}

@LibEntry{string.gsub (s, pattern, repl [, n])|
Returns a copy of @id{s}
in which all (or the first @id{n}, if given)
occurrences of the @id{pattern} have been
replaced by a replacement string specified by @id{repl},
which can be a string, a table, or a function.
@id{gsub} also returns, as its second value,
the total number of matches that occurred.

If @id{repl} is a string, then its value is used for replacement.
The @N{character @T{%}} works as an escape character:
any sequence in @id{repl} of the form @T{%@rep{n}},
with @rep{n} between 1 and 9,
stands for the value of the @rep{n}-th captured substring (see below).
The sequence @T{%0} stands for the whole match.
The sequence @T{%%} stands for a @N{single @T{%}}.

If @id{repl} is a table, then the table is queried for every match,
using the first capture as the key;
if the pattern specifies no captures,
then the whole match is used as the key.

If @id{repl} is a function, then this function is called every time a
match occurs, with all captured substrings passed as arguments,
in order;
if the pattern specifies no captures,
then the whole match is passed as a sole argument.

If the value returned by the table query or by the function call
is a string or a number,
then it is used as the replacement string;
otherwise, if it is @Rw{false} or @nil,
then there is no replacement
(that is, the original match is kept in the string).

Here are some examples:
@verbatim{
x = string.gsub("hello world", "(%w+)", "%1 %1")
--> x="hello hello world world"

x = string.gsub("hello world", "%w+", "%0 %0", 1)
--> x="hello hello world"

x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
--> x="world hello Lua from"

x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
--> x="home = /home/roberto, user = roberto"

x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
      return loadstring(s)()
    end)
--> x="4+5 = 9"

local t = {name="lua", version="5.1"}
x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
--> x="lua-5.1.tar.gz"
}

}

@LibEntry{string.len (s)|
Receives a string and returns its length.
The empty string @T{""} has length 0.
Embedded zeros are counted,
so @T{"a\000bc\000"} has length 5.

}

@LibEntry{string.lower (s)|
Receives a string and returns a copy of this string with all
uppercase letters changed to lowercase.
All other characters are left unchanged.
The definition of what an uppercase letter is depends on the current locale.

}

@LibEntry{string.match (s, pattern [, init])|
Looks for the first @emph{match} of
@id{pattern} in the string @id{s}.
If it finds one, then @id{match} returns
the captures from the pattern;
otherwise it returns @nil.
If @id{pattern} specifies no captures,
then the whole match is returned.
A third, optional numerical argument @id{init} specifies
where to start the search;
its default value @N{is 1} and can be negative.

}

@LibEntry{string.rep (s, n)|
Returns a string that is the concatenation of @id{n} copies of
the string @id{s}.

}

@LibEntry{string.reverse (s)|
Returns a string that is the string @id{s} reversed.

}

@LibEntry{string.sub (s, i [, j])|
Returns the substring of @id{s} that
starts at @id{i}  and continues until @id{j};
@id{i} and @id{j} can be negative.
If @id{j} is absent, then it is assumed to be equal to @num{-1}
(which is the same as the string length).
In particular,
the call @T{string.sub(s,1,j)} returns a prefix of @id{s}
with length @id{j},
and @T{string.sub(s, -i)} returns a suffix of @id{s}
with length @id{i}.

}

@LibEntry{string.upper (s)|
Receives a string and returns a copy of this string with all
lowercase letters changed to uppercase.
All other characters are left unchanged.
The definition of what a lowercase letter is depends on the current locale.

@sect3{pm| @title{Patterns}

@sect4{@title{Character Class:}
A @def{character class} is used to represent a set of characters.
The following combinations are allowed in describing a character class:
@description{

@item{@rep{x}|
(where @rep{x} is not one of the @emph{magic characters}
@T{^$()%.[]*+-?})
represents the character @emph{x} itself.
}

@item{@T{.}| (a dot) represents all characters.}

@item{@T{%a}| represents all letters.}

@item{@T{%c}| represents all control characters.}

@item{@T{%d}| represents all digits.}

@item{@T{%l}| represents all lowercase letters.}

@item{@T{%p}| represents all punctuation characters.}

@item{@T{%s}| represents all space characters.}

@item{@T{%u}| represents all uppercase letters.}

@item{@T{%w}| represents all alphanumeric characters.}

@item{@T{%x}| represents all hexadecimal digits.}

@item{@T{%z}| represents the character with representation 0.}

@item{@T{%@rep{x}}| (where @rep{x} is any non-alphanumeric character)
represents the character @rep{x}.
This is the standard way to escape the magic characters.
Any punctuation character (even the non magic)
can be preceded by a @Char{%}
when used to represent itself in a pattern.
}

@item{@T{[@rep{set}]}|
represents the class which is the union of all
characters in @rep{set}.
A range of characters can be specified by
separating the end characters of the range with a @Char{-}.
All classes @T{%}@emph{x} described above can also be used as
components in @rep{set}.
All other characters in @rep{set} represent themselves.
For example, @T{[%w_]} (or @T{[_%w]})
represents all alphanumeric characters plus the underscore,
@T{[0-7]} represents the octal digits,
and @T{[0-7%l%-]} represents the octal digits plus
the lowercase letters plus the @Char{-} character.

The interaction between ranges and classes is not defined.
Therefore, patterns like @T{[%a-z]} or @T{[a-%%]}
have no meaning.
}

@item{@T{[^@rep{set}]}|
represents the complement of @rep{set},
where @rep{set} is interpreted as above.
}

}
For all classes represented by single letters (@T{%a}, @T{%c}, etc.),
the corresponding uppercase letter represents the complement of the class.
For instance, @T{%S} represents all non-space characters.

The definitions of letter, space, and other character groups
depend on the current locale.
In particular, the class @T{[a-z]} may not be equivalent to @T{%l}.

}

@sect4{@title{Pattern Item:}
A @def{pattern item} can be
@itemize{

@item{
a single character class,
which matches any single character in the class;
}

@item{
a single character class followed by @Char{*},
which matches 0 or more repetitions of characters in the class.
These repetition items will always match the longest possible sequence;
}

@item{
a single character class followed by @Char{+},
which matches 1 or more repetitions of characters in the class.
These repetition items will always match the longest possible sequence;
}

@item{
a single character class followed by @Char{-},
which also matches 0 or more repetitions of characters in the class.
Unlike @Char{*},
these repetition items will always match the @emph{shortest} possible sequence;
}

@item{
a single character class followed by @Char{?},
which matches 0 or 1 occurrence of a character in the class;
}

@item{
@T{%@rep{n}}, for @rep{n} between 1 and 9;
such item matches a substring equal to the @rep{n}-th captured string
(see below);
}

@item{
@T{%b@rep{xy}}, where @rep{x} and @rep{y} are two distinct characters;
such item matches strings that start @N{with @rep{x}}, end @N{with @rep{y}},
and where the @rep{x} and @rep{y} are @emph{balanced}.
This means that, if one reads the string from left to right,
counting @M{+1} for an @rep{x} and @M{-1} for a @rep{y},
the ending @rep{y} is the first @rep{y} where the count reaches 0.
For instance, the item @T{%b()} matches expressions with
balanced parentheses.
}

}

}

@sect4{@title{Pattern:}
A @def{pattern} is a sequence of pattern items.
A @Char{^} at the beginning of a pattern anchors the match at the
beginning of the subject string.
A @Char{$} at the end of a pattern anchors the match at the
end of the subject string.
At other positions,
@Char{^} and @Char{$} have no special meaning and represent themselves.

}

@sect4{@title{Captures:}
A pattern can contain sub-patterns enclosed in parentheses;
they describe @def{captures}.
When a match succeeds, the substrings of the subject string
that match captures are stored (@emph{captured}) for future use.
Captures are numbered according to their left parentheses.
For instance, in the pattern @T{"(a*(.)%w(%s*))"},
the part of the string matching @T{"a*(.)%w(%s*)"} is
stored as the first capture (and therefore has @N{number 1});
the character matching @St{.} is captured with @N{number 2},
and the part matching @St{%s*} has @N{number 3}.

As a special case, the empty capture @T{()} captures
the current string position (a number).
For instance, if we apply the pattern @T{"()aa()"} on the
string @T{"flaaap"}, there will be two captures: @N{3 and 5}.

A pattern cannot contain embedded zeros.  Use @T{%z} instead.

}

}

}

}

@sect2{@title{Table Manipulation}
This library provides generic functions for table manipulation.
It provides all its functions inside the table @defid{table}.

Most functions in the table library assume that the table
represents an array or a list.
For these functions, when we talk about the @Q{length} of a table
we mean the result of the length operator.


@LibEntry{table.concat (table [, sep [, i [, j]]])|
Given an array where all elements are strings or numbers,
returns @T{table[i]..sep..table[i+1] @Cdots sep..table[j]}.
The default value for @id{sep} is the empty string,
the default for @id{i} is 1,
and the default for @id{j} is the length of the table.
If @id{i} is greater than @id{j}, returns the empty string.

}

@LibEntry{table.insert (table, [pos,] value)|

Inserts element @id{value} at position @id{pos} in @id{table},
shifting up other elements to open space, if necessary.
The default value for @id{pos} is @T{n+1},
where @id{n} is the length of the table @see{len-op},
so that a call @T{table.insert(t,x)} inserts @id{x} at the end
of table @id{t}.

}

@LibEntry{table.maxn (table)|

Returns the largest positive numerical index of the given table,
or zero if the table has no positive numerical indices.
(To do its job this function does a linear traversal of
the whole table.) 

}

@LibEntry{table.remove (table [, pos])|

Removes from @id{table} the element at position @id{pos},
shifting down other elements to close the space, if necessary.
Returns the value of the removed element.
The default value for @id{pos} is @id{n},
where @id{n} is the length of the table,
so that a call @T{table.remove(t)} removes the last element
of table @id{t}.

}

@LibEntry{table.sort (table [, comp])|
Sorts table elements in a given order, @emph{in-place},
from @T{table[1]} to @T{table[n]},
where @id{n} is the length of the table.
If @id{comp} is given,
then it must be a function that receives two table elements,
and returns true
when the first is less than the second
(so that @T{not comp(a[i+1],a[i])} will be true after the sort).
If @id{comp} is not given,
then the standard Lua operator @T{<} is used instead.

The sort algorithm is not stable;
that is, elements considered equal by the given order
may have their relative positions changed by the sort.

}

}

@sect2{mathlib| @title{Mathematical Functions}

This library is an interface to the standard @N{C math} library.
It provides all its functions inside the table @defid{math}.

@LibEntry{math.abs (x)|

Returns the absolute value of @id{x}.

}

@LibEntry{math.acos (x)|

Returns the arc cosine of @id{x} (in radians).

}

@LibEntry{math.asin (x)|

Returns the arc sine of @id{x} (in radians).

}

@LibEntry{math.atan (x)|

Returns the arc tangent of @id{x} (in radians).

}

@LibEntry{math.atan2 (y, x)|

Returns the arc tangent of @T{y/x} (in radians),
but uses the signs of both parameters to find the
quadrant of the result.
(It also handles correctly the case of @id{x} being zero.)

}

@LibEntry{math.ceil (x)|

Returns the smallest integer larger than or equal to @id{x}.

}

@LibEntry{math.cos (x)|

Returns the cosine of @id{x} (assumed to be in radians).

}


@LibEntry{math.cosh (x)|

Returns the hyperbolic cosine of @id{x}.

}

@LibEntry{math.deg (x)|

Returns the angle @id{x} (given in radians) in degrees.

}

@LibEntry{math.exp (x)|

Returns the value @M{e@sp{x}}.

}


@LibEntry{math.floor (x)|

Returns the largest integer smaller than or equal to @id{x}.

}


@LibEntry{math.fmod (x, y)|

Returns the remainder of the division of @id{x} by @id{y}
that rounds the quotient towards zero.

}

@LibEntry{math.frexp (x)|

Returns @id{m} and @id{e} such that @M{x = m2@sp{e}},
@id{e} is an integer and the absolute value of @id{m} is
in the range @M{[0.5, 1)}
(or zero when @id{x} is zero).

}

@LibEntry{math.huge|

The value @idx{HUGE_VAL},
a value larger than or equal to any other numerical value.

}

@LibEntry{math.ldexp (m, e)|

Returns @M{m2@sp{e}} (@id{e} should be an integer).

}

@LibEntry{math.log (x)|

Returns the natural logarithm of @id{x}.

}

@LibEntry{math.log10 (x)|

Returns the base-10 logarithm of @id{x}.

}

@LibEntry{math.max (x, @Cdots)|

Returns the maximum value among its arguments.

}

@LibEntry{math.min (x, @Cdots)|

Returns the minimum value among its arguments.

}

@LibEntry{math.modf (x)|

Returns two numbers,
the integral part of @id{x} and the fractional part of @id{x}.

}

@LibEntry{math.pi|

The value of @M{@pi}.

}

@LibEntry{math.pow (x, y)|

Returns @M{x@sp{y}}.
(You can also use the expression @T{x^y} to compute this value.)

}

@LibEntry{math.rad (x)|

Returns the angle @id{x} (given in degrees) in radians.

}

@LibEntry{math.random ([m [, n]])|

This function is an interface to the simple
pseudo-random generator function @id{rand} provided by @N{ANSI C}.
(No guarantees can be given for its statistical properties.)

When called without arguments,
returns a uniform pseudo-random real number
in the range @M{[0,1)}.  @C{]}
When called with an integer number @id{m},
@id{math.random} returns
a uniform pseudo-random integer in the range @M{[1, m]}.
When called with two integer numbers @id{m} and @id{n},
@id{math.random} returns a uniform pseudo-random
integer in the range @M{[m, n]}.

}

@LibEntry{math.randomseed (x)|

Sets @id{x} as the @Q{seed}
for the pseudo-random generator:
equal seeds produce equal sequences of numbers.

}

@LibEntry{math.sin (x)|

Returns the sine of @id{x} (assumed to be in radians).

}

@LibEntry{math.sinh (x)|

Returns the hyperbolic sine of @id{x}.

}

@LibEntry{math.sqrt (x)|

Returns the square root of @id{x}.
(You can also use the expression @T{x^0.5} to compute this value.)

}

@LibEntry{math.tan (x)|

Returns the tangent of @id{x} (assumed to be in radians).

}

@LibEntry{math.tanh (x)|

Returns the hyperbolic tangent of @id{x}.

}

}

@sect2{libio| @title{Input and Output Facilities}

The I/O library provides two different styles for file manipulation.
The first one uses implicit file descriptors;
that is, there are operations to set a default input file and a
default output file,
and all input/output operations are over these default files.
The second style uses explicit file descriptors.

When using implicit file descriptors,
all operations are supplied by table @defid{io}.
When using explicit file descriptors,
the operation @Lid{io.open} returns a file descriptor
and then all operations are supplied as methods of the file descriptor.

The table @id{io} also provides
three predefined file descriptors with their usual meanings from C:
@defid{io.stdin}, @defid{io.stdout}, and @defid{io.stderr}.
The I/O library never closes these files.

Unless otherwise stated,
all I/O functions return @nil on failure
(plus an error message as a second result and
a system-dependent error code as a third result)
and some value different from @nil on success.


@LibEntry{io.close ([file])|

Equivalent to @T{file:close()}.
Without a @id{file}, closes the default output file.

}

@LibEntry{io.flush ()|

Equivalent to @T{file:flush} over the default output file.

}

@LibEntry{io.input ([file])|

When called with a file name, it opens the named file (in text mode),
and sets its handle as the default input file.
When called with a file handle,
it simply sets this file handle as the default input file.
When called without parameters,
it returns the current default input file.

In case of errors this function raises the error,
instead of returning an error code.

}

@LibEntry{io.lines ([filename])|

Opens the given file name in read mode
and returns an iterator function that,
each time it is called,
returns a new line from the file.
Therefore, the construction
@verbatim{
for line in io.lines(filename) do @rep{body} end
}
will iterate over all lines of the file.
When the iterator function detects the end of file,
it returns @nil (to finish the loop) and automatically closes the file.

The call @T{io.lines()} (with no file name) is equivalent
to @T{io.input():lines()};
that is, it iterates over the lines of the default input file.
In this case it does not close the file when the loop ends.

}

@LibEntry{io.open (filename [, mode])|

This function opens a file,
in the mode specified in the string @id{mode}.
It returns a new file handle,
or, in case of errors, @nil plus an error message.

The @id{mode} string can be any of the following:
@description{
@item{@Q{r}| read mode (the default);}
@item{@Q{w}| write mode;}
@item{@Q{a}| append mode;}
@item{@Q{r+}| update mode, all previous data is preserved;}
@item{@Q{w+}| update mode, all previous data is erased;}
@item{@Q{a+}| append update mode, previous data is preserved,
  writing is only allowed at the end of file.}
}
The @id{mode} string can also have a @Char{b} at the end,
which is needed in some systems to open the file in binary mode.
This string is exactly what is used in the
@N{standard C} function @id{fopen}.

}

@LibEntry{io.output ([file])|

Similar to @Lid{io.input}, but operates over the default output file.

}

@LibEntry{io.popen (prog [, mode])|

Starts program @id{prog} in a separated process and returns
a file handle that you can use to read data from this program
(if @id{mode} is @T{"r"}, the default)
or to write data to this program
(if @id{mode} is @T{"w"}).

This function is system dependent and is not available
on all platforms.

}

@LibEntry{io.read (@Cdots)|

Equivalent to @T{io.input():read}.

}

@LibEntry{io.tmpfile ()|

Returns a handle for a temporary file.
This file is opened in update mode
and it is automatically removed when the program ends.

}

@LibEntry{io.type (obj)|

Checks whether @id{obj} is a valid file handle.
Returns the string @T{"file"} if @id{obj} is an open file handle,
@T{"closed file"} if @id{obj} is a closed file handle,
or @nil if @id{obj} is not a file handle.

}

@LibEntry{io.write (@Cdots)|

Equivalent to @T{io.output():write}.


}

@LibEntry{file:close ()|

Closes @id{file}.
Note that files are automatically closed when
their handles are garbage collected,
but that takes an unpredictable amount of time to happen.

}

@LibEntry{file:flush ()|

Saves any written data to @id{file}.

}

@LibEntry{file:lines ()|

Returns an iterator function that,
each time it is called,
returns a new line from the file.
Therefore, the construction
@verbatim{
for line in file:lines() do @rep{body} end
}
will iterate over all lines of the file.
(Unlike @Lid{io.lines}, this function does not close the file
when the loop ends.)

}

@LibEntry{file:read (@Cdots)|

Reads the file @id{file},
according to the given formats, which specify what to read.
For each format,
the function returns a string (or a number) with the characters read,
or @nil if it cannot read data with the specified format.
When called without formats,
it uses a default format that reads the entire next line
(see below).

The available formats are
@description{

@item{@Q{*n}|
reads a number;
this is the only format that returns a number instead of a string.
}

@item{@Q{*a}|
reads the whole file, starting at the current position.
On end of file, it returns the empty string.
}

@item{@Q{*l}|
reads the next line (skipping the end of line),
returning @nil on end of file.
This is the default format.
}

@item{@emph{number}|
reads a string with up to this number of characters,
returning @nil on end of file.
If number is zero,
it reads nothing and returns an empty string,
or @nil on end of file.
}

}

}

@LibEntry{file:seek ([whence] [, offset])|

Sets and gets the file position,
measured from the beginning of the file,
to the position given by @id{offset} plus a base
specified by the string @id{whence}, as follows:
@description{
@item{@Q{set}| base is position 0 (beginning of the file);}
@item{@Q{cur}| base is current position;}
@item{@Q{end}| base is end of file;}
}
In case of success, function @id{seek} returns the final file position,
measured in bytes from the beginning of the file.
If this function fails, it returns @nil,
plus a string describing the error.

The default value for @id{whence} is @T{"cur"},
and for @id{offset} is 0.
Therefore, the call @T{file:seek()} returns the current
file position, without changing it;
the call @T{file:seek("set")} sets the position to the
beginning of the file (and returns 0);
and the call @T{file:seek("end")} sets the position to the
end of the file, and returns its size.

}

@LibEntry{file:setvbuf (mode [, size])|

Sets the buffering mode for an output file.
There are three available modes:
@description{

@item{@Q{no}|
no buffering; the result of any output operation appears immediately.
}

@item{@Q{full}|
full buffering; output operation is performed only
when the buffer is full (or when you explicitly @T{flush} the file
@seeF{io.flush}).
}

@item{@Q{line}|
line buffering; output is buffered until a newline is output
or there is any input from some special files
(such as a terminal device).
}

}
For the last two cases, @id{size}
specifies the size of the buffer, in bytes.
The default is an appropriate size.

}

@LibEntry{file:write (@Cdots)|

Writes the value of each of its arguments to
the @id{file}.
The arguments must be strings or numbers.
To write other values,
use @Lid{tostring} or @Lid{string.format} before @id{write}.

}

}

@sect2{libiosys| @title{Operating System Facilities}

This library is implemented through table @defid{os}.


@LibEntry{os.clock ()|

Returns an approximation of the amount in seconds of CPU time
used by the program.

}

@LibEntry{os.date ([format [, time]])|

Returns a string or a table containing date and time,
formatted according to the given string @id{format}.

If the @id{time} argument is present,
this is the time to be formatted
(see the @Lid{os.time} function for a description of this value).
Otherwise, @id{date} formats the current time.

If @id{format} starts with @Char{!},
then the date is formatted in Coordinated Universal Time.
After this optional character,
if @id{format} is the string @St{*t},
then @id{date} returns a table with the following fields:
@id{year} (four digits), @id{month} (1--12), @id{day} (1--31),
@id{hour} (0--23), @id{min} (0--59), @id{sec} (0--61),
@id{wday} (weekday, Sunday @N{is 1}),
@id{yday} (day of the year),
and @id{isdst} (daylight saving flag, a boolean).

If @id{format} is not @St{*t},
then @id{date} returns the date as a string,
formatted according to the same rules as the @N{C function} @id{strftime}.

When called without arguments,
@id{date} returns a reasonable date and time representation that depends on
the host system and on the current locale
(that is, @T{os.date()} is equivalent to @T{os.date("%c")}).

}

@LibEntry{os.difftime (t2, t1)|

Returns the number of seconds from time @id{t1} to time @id{t2}.
In POSIX, Windows, and some other systems,
this value is exactly @id{t2}@M{-}@id{t1}.

}

@LibEntry{os.execute ([command])|

This function is equivalent to the @N{C function} @id{system}.
It passes @id{command} to be executed by an operating system shell.
It returns a status code, which is system-dependent.
If @id{command} is absent, then it returns nonzero if a shell is available
and zero otherwise.

}

@LibEntry{os.exit ([code])|

Calls the @N{C function} @id{exit},
with an optional @id{code},
to terminate the host program.
The default value for @id{code} is the success code.

}

@LibEntry{os.getenv (varname)|

Returns the value of the process environment variable @id{varname},
or @nil if the variable is not defined.

}

@LibEntry{os.remove (filename)|

Deletes the file or directory with the given name.
Directories must be empty to be removed.
If this function fails, it returns @nil,
plus a string describing the error.

}

@LibEntry{os.rename (oldname, newname)|

Renames file or directory named @id{oldname} to @id{newname}.
If this function fails, it returns @nil,
plus a string describing the error.

}

@LibEntry{os.setlocale (locale [, category])|

Sets the current locale of the program.
@id{locale} is a string specifying a locale;
@id{category} is an optional string describing which category to change:
@T{"all"}, @T{"collate"}, @T{"ctype"},
@T{"monetary"}, @T{"numeric"}, or @T{"time"};
the default category is @T{"all"}.
The function returns the name of the new locale,
or @nil if the request cannot be honored.

If @id{locale} is the empty string,
the current locale is set to an implementation-defined native locale.
If @id{locale} is the string @St{C},
the current locale is set to the standard C locale.

When called with @nil as the first argument,
this function only returns the name of the current locale
for the given category.

}

@LibEntry{os.time ([table])|

Returns the current time when called without arguments,
or a time representing the date and time specified by the given table.
This table must have fields @id{year}, @id{month}, and @id{day},
and may have fields @id{hour}, @id{min}, @id{sec}, and @id{isdst}
(for a description of these fields, see the @Lid{os.date} function).

The returned value is a number, whose meaning depends on your system.
In POSIX, Windows, and some other systems, this number counts the number
of seconds since some given start time (the @Q{epoch}).
In other systems, the meaning is not specified,
and the number returned by @id{time} can be used only as an argument to
@id{date} and @id{difftime}.

}

@LibEntry{os.tmpname ()|

Returns a string with a file name that can
be used for a temporary file.
The file must be explicitly opened before its use
and explicitly removed when no longer needed.

On some systems (POSIX),
this function also creates a file with that name,
to avoid security risks.
(Someone else might create the file with wrong permissions
in the time between getting the name and creating the file.)
You still have to open the file to use it
and to remove it (even if you do not use it).

When possible,
you may prefer to use @Lid{io.tmpfile},
which automatically removes the file when the program ends.

}

}

@sect2{libdebug| @title{The Debug Library}

This library provides
the functionality of the debug interface to Lua programs.
You should exert care when using this library.
The functions provided here should be used exclusively for debugging
and similar tasks, such as profiling.
Please resist the temptation to use them as a
usual programming tool:
they can be very slow.
Moreover, several of these functions
violate some assumptions about Lua code
(e.g., that variables local to a function
cannot be accessed from outside or
that userdata metatables cannot be changed by Lua code)
and therefore can compromise otherwise secure code.

All functions in this library are provided
inside the @defid{debug} table.
All functions that operate over a thread
have an optional first argument which is the
thread to operate over.
The default is always the current thread.


@LibEntry{debug.debug ()|

Enters an interactive mode with the user,
running each string that the user enters.
Using simple commands and other debug facilities,
the user can inspect global and local variables,
change their values, evaluate expressions, and so on.
A line containing only the word @id{cont} finishes this function,
so that the caller continues its execution.

Note that commands for @id{debug.debug} are not lexically nested
within any function, and so have no direct access to local variables.

}

@LibEntry{debug.getfenv (o)|
Returns the environment of object @id{o}.

}

@LibEntry{debug.gethook ([thread])|

Returns the current hook settings of the thread, as three values:
the current hook function, the current hook mask,
and the current hook count
(as set by the @Lid{debug.sethook} function).

}

@LibEntry{debug.getinfo ([thread,] function [, what])|

Returns a table with information about a function.
You can give the function directly,
or you can give a number as the value of @id{function},
which means the function running at level @id{function} of the call stack
of the given thread:
@N{level 0} is the current function (@id{getinfo} itself);
@N{level 1} is the function that called @id{getinfo};
and so on.
If @id{function} is a number larger than the number of active functions,
then @id{getinfo} returns @nil.

The returned table can contain all the fields returned by @Lid{lua_getinfo},
with the string @id{what} describing which fields to fill in.
The default for @id{what} is to get all information available,
except the table of valid lines.
If present,
the option @Char{f}
adds a field named @id{func} with the function itself.
If present,
the option @Char{L}
adds a field named @id{activelines} with the table of
valid lines.

For instance, the expression @T{debug.getinfo(1,"n").name} returns
a table with a name for the current function,
if a reasonable name can be found,
and the expression @T{debug.getinfo(print)}
returns a table with all available information
about the @Lid{print} function.

}

@LibEntry{debug.getlocal ([thread,] level, local)|

This function returns the name and the value of the local variable
with index @id{local} of the function at level @id{level} of the stack.
(The first parameter or local variable has @N{index 1}, and so on,
until the last active local variable.)
The function returns @nil if there is no local
variable with the given index,
and raises an error when called with a @id{level} out of range.
(You can call @Lid{debug.getinfo} to check whether the level is valid.)

Variable names starting with @Char{(} (open parentheses)
represent internal variables
(loop control variables, temporaries, and @N{C function} locals).

}

@LibEntry{debug.getmetatable (object)|

Returns the metatable of the given @id{object}
or @nil if it does not have a metatable.

}

@LibEntry{debug.getregistry ()|

Returns the registry table @see{registry}.

}

@LibEntry{debug.getupvalue (func, up)|

This function returns the name and the value of the upvalue
with index @id{up} of the function @id{func}.
The function returns @nil if there is no upvalue with the given index.

}

@LibEntry{debug.setfenv (object, table)|

Sets the environment of the given @id{object} to the given @id{table}.
Returns @id{object}.

}

@LibEntry{debug.sethook ([thread,] hook, mask [, count])|

Sets the given function as a hook.
The string @id{mask} and the number @id{count} describe
when the hook will be called.
The string mask may have the following characters,
with the given meaning:
@description{
@item{@T{"c"}| the hook is called every time Lua calls a function;}
@item{@T{"r"}| the hook is called every time Lua returns from a function;}
@item{@T{"l"}| the hook is called every time Lua enters a new line of code.}
}
With a @id{count} different from zero,
the hook is called after every @id{count} instructions.

When called without arguments,
@Lid{debug.sethook} turns off the hook.

When the hook is called, its first parameter is a string
describing the event that has triggered its call:
@T{"call"}, @T{"return"} (or @T{"tail return"},
when simulating a return from a tail call),
@T{"line"}, and @T{"count"}.
For line events,
the hook also gets the new line number as its second parameter.
Inside a hook,
you can call @id{getinfo} with @N{level 2} to get more information about
the running function
(@N{level 0} is the @id{getinfo} function,
and @N{level 1} is the hook function),
unless the event is @T{"tail return"}.
In this case, Lua is only simulating the return,
and a call to @id{getinfo} will return invalid data.

}

@LibEntry{debug.setlocal ([thread,] level, local, value)|

This function assigns the value @id{value} to the local variable
with index @id{local} of the function at level @id{level} of the stack.
The function returns @nil if there is no local
variable with the given index,
and raises an error when called with a @id{level} out of range.
(You can call @id{getinfo} to check whether the level is valid.)
Otherwise, it returns the name of the local variable.

}

@LibEntry{debug.setmetatable (object, table)|

Sets the metatable for the given @id{object} to the given @id{table}
(which can be @nil).

}

@LibEntry{debug.setupvalue (func, up, value)|

This function assigns the value @id{value} to the upvalue
with index @id{up} of the function @id{func}.
The function returns @nil if there is no upvalue
with the given index.
Otherwise, it returns the name of the upvalue.

}

@LibEntry{debug.traceback ([thread,] [message] [, level])|

Returns a string with a traceback of the call stack.
An optional @id{message} string is appended
at the beginning of the traceback.
An optional @id{level} number tells at which level
to start the traceback
(default is 1, the function calling @id{traceback}).

}

}

}


@C{-------------------------------------------------------------------------}
@sect1{lua-sa| @title{Lua Stand-alone}

Although Lua has been designed as an extension language,
to be embedded in a host @N{C program},
it is also frequently used as a stand-alone language.
An interpreter for Lua as a stand-alone language,
called simply @id{lua},
is provided with the standard distribution.
The @x{stand-alone interpreter} includes
all standard libraries, including the debug library.
Its usage is:
@verbatim{
lua [options] [script [args]]
}
The options are:
@description{
@item{@T{-e @rep{stat}}| executes string @rep{stat};}
@item{@T{-l @rep{mod}}| @Q{requires} @rep{mod};}
@item{@T{-i}| enters interactive mode after running @rep{script};}
@item{@T{-v}| prints version information;}
@item{@T{--}| stops handling options;}
@item{@T{-}| executes @id{stdin} as a file and stops handling options.}
}
After handling its options, @id{lua} runs the given @emph{script},
passing to it the given @emph{args} as string arguments.
When called without arguments,
@id{lua} behaves as @T{lua -v -i}
when the standard input (@id{stdin}) is a terminal,
and as @T{lua -} otherwise.

Before running any argument,
the interpreter checks for an environment variable @defid{LUA_INIT}.
If its format is @T{@At@rep{filename}},
then @id{lua} executes the file.
Otherwise, @id{lua} executes the string itself.

All options are handled in order, except @T{-i}.
For instance, an invocation like
@verbatim{
$ lua -e'a=1' -e 'print(a)' script.lua
}
will first set @id{a} to 1, then print the value of @id{a} (which is @Char{1}),
and finally run the file @id{script.lua} with no arguments.
(Here @T{$} is the shell prompt. Your prompt may be different.)

Before starting to run the script,
@id{lua} collects all arguments in the command line
in a global table called @id{arg}.
The script name is stored at index 0,
the first argument after the script name goes to index 1,
and so on.
Any arguments before the script name
(that is, the interpreter name plus the options)
go to negative indices.
For instance, in the call
@verbatim{
$ lua -la b.lua t1 t2
}
the interpreter first runs the file @id{a.lua},
then creates a table
@verbatim{
arg = { [-2] = "lua", [-1] = "-la",
        [0] = "b.lua",
        [1] = "t1", [2] = "t2" }
}
and finally runs the file @id{b.lua}.
The script is called with @T{arg[1]}, @T{arg[2]}, @Cdots
as arguments;
it can also access these arguments with the vararg expression @Char{...}.

In interactive mode,
if you write an incomplete statement,
the interpreter waits for its completion
by issuing a different prompt.

If the global variable @defid{_PROMPT} contains a string,
then its value is used as the prompt.
Similarly, if the global variable @defid{_PROMPT2} contains a string,
its value is used as the secondary prompt
(issued during incomplete statements).
Therefore, both prompts can be changed directly on the command line
or in any Lua programs by assigning to @id{_PROMPT}.
See the next example:
@verbatim{
$ lua -e"_PROMPT='myprompt> '" -i
}
(The outer pair of quotes is for the shell,
the inner pair is for Lua.)
Note the use of @T{-i} to enter interactive mode;
otherwise,
the program would just end silently
right after the assignment to @id{_PROMPT}.

To allow the use of Lua as a
script interpreter in Unix systems,
the stand-alone interpreter skips
the first line of a chunk if it starts with @T{#}.
Therefore, Lua scripts can be made into executable programs
by using @T{chmod +x} and @N{the @T{#!}} form,
as in
@verbatim{
#!/usr/local/bin/lua
}
(Of course,
the location of the Lua interpreter may be different in your machine.
If @id{lua} is in your @id{PATH},
then 
@verbatim{
#!/usr/bin/env lua
}
is a more portable solution.) 

}


@sect1{incompat| @title{Incompatibilities with the Previous Version}

Here we list the incompatibilities that you may find when moving a program
from @N{Lua 5.0} to @N{Lua 5.1}.
You can avoid most of the incompatibilities compiling Lua with
appropriate options (see file @id{luaconf.h}).
However,
all these compatibility options will be removed in the next version of Lua.

@sect2{@title{Changes in the Language}
@itemize{

@item{
The vararg system changed from the pseudo-argument @id{arg} with a
table with the extra arguments to the vararg expression.
(See compile-time option @idx{LUA_COMPAT_VARARG} in @id{luaconf.h}.)
}

@item{
There was a subtle change in the scope of the implicit
variables of the @Rw{for} statement and for the @Rw{repeat} statement.
}

@item{
The long string/long comment syntax (@T{[[@rep{string}]]})
does not allow nesting.
You can use the new syntax (@T{[=[@rep{string}]=]}) in these cases.
(See compile-time option @idx{LUA_COMPAT_LSTR} in @id{luaconf.h}.)
}

}

}

@sect2{@title{Changes in the Libraries}
@itemize{

@item{
Function @id{string.gfind} was renamed @Lid{string.gmatch}.
(See compile-time option @idx{LUA_COMPAT_GFIND} in @id{luaconf.h}.)
}

@item{
When @Lid{string.gsub} is called with a function as its
third argument,
whenever this function returns @nil or @Rw{false} the
replacement string is the whole match,
instead of the empty string.
}

@item{
Function @id{table.setn} was deprecated.
Function @id{table.getn} corresponds
to the new length operator (@T{#});
use the operator instead of the function.
(See compile-time option @idx{LUA_COMPAT_GETN} in @id{luaconf.h}.)
}

@item{
Function @id{loadlib} was renamed @Lid{package.loadlib}.
(See compile-time option @idx{LUA_COMPAT_LOADLIB} in @id{luaconf.h}.)
}

@item{
Function @id{math.mod} was renamed @Lid{math.fmod}.
(See compile-time option @idx{LUA_COMPAT_MOD} in @id{luaconf.h}.)
}

@item{
Functions @id{table.foreach} and @id{table.foreachi} are deprecated.
You can use a for loop with @id{pairs} or @id{ipairs} instead.
}

@item{
There were substantial changes in function @Lid{require} due to
the new module system.
However, the new behavior is mostly compatible with the old,
but @id{require} gets the path from @Lid{package.path} instead
of from @id{LUA_PATH}.
}

@item{
Function @Lid{collectgarbage} has different arguments.
Function @id{gcinfo} is deprecated;
use @T{collectgarbage("count")} instead.
}

}

}

@sect2{@title{Changes in the API}
@itemize{

@item{
The @id{luaopen_*} functions (to open libraries)
cannot be called directly,
like a regular C function.
They must be called through Lua,
like a Lua function.
}

@item{
Function @id{lua_open} was replaced by @Lid{lua_newstate} to
allow the user to set a memory-allocation function.
You can use @Lid{luaL_newstate} from the standard library to
create a state with a standard allocation function
(based on @id{realloc}).
}

@item{
Functions @id{luaL_getn} and @id{luaL_setn}
(from the auxiliary library) are deprecated.
Use @Lid{lua_objlen} instead of @id{luaL_getn}
and nothing instead of @id{luaL_setn}.
}

@item{
Function @id{luaL_openlib} was replaced by @Lid{luaL_register}.
}

@item{
Function @id{luaL_checkudata} now throws an error when the given value
is not a userdata of the expected type.
(In @N{Lua 5.0} it returned @id{NULL}.)
}

}

}

}


@C{[===============================================================}

@sect1{BNF| @title{The Complete Syntax of Lua}

Here is the complete syntax of Lua in extended BNF.
(It does not describe operator precedences.)
@index{grammar}

@Produc{

@producname{chunk}@producbody{@bnfrep{stat @bnfopt{@bnfter{;}}}
                              @bnfopt{laststat @bnfopt{@bnfter{;}}}}

@producname{block}@producbody{chunk}

@producname{stat}@producbody{
	varlist @bnfter{=} explist
@OrNL	functioncall
@OrNL	@Rw{do} block @Rw{end}
@OrNL	@Rw{while} exp @Rw{do} block @Rw{end}
@OrNL	@Rw{repeat} block @Rw{until} exp
@OrNL	@Rw{if} exp @Rw{then} block
	@bnfrep{@Rw{elseif} exp @Rw{then} block}
	@bnfopt{@Rw{else} block} @Rw{end}
@OrNL	@Rw{for} @bnfNter{Name} @bnfter{=} exp @bnfter{,} exp @bnfopt{@bnfter{,} exp}
	@Rw{do} block @Rw{end}
@OrNL   @Rw{for} namelist @Rw{in} explist @Rw{do} block @Rw{end}
@OrNL	@Rw{function} funcname funcbody
@OrNL	@Rw{local} @Rw{function} @bnfNter{Name} funcbody
@OrNL	@Rw{local} namelist @bnfopt{@bnfter{=} explist}
}

@producname{laststat}@producbody{@Rw{return} @bnfopt{explist} @Or @Rw{break}}

@producname{funcname}@producbody{@bnfNter{Name} @bnfrep{@bnfter{.} @bnfNter{Name}}
                              @bnfopt{@bnfter{:} @bnfNter{Name}}}

@producname{varlist}@producbody{var @bnfrep{@bnfter{,} var}}

@producname{var}@producbody{
	@bnfNter{Name}
@Or	prefixexp @bnfter{[} exp @bnfter{]}
@Or	prefixexp @bnfter{.} @bnfNter{Name}
}

@producname{namelist}@producbody{@bnfNter{Name} @bnfrep{@bnfter{,} @bnfNter{Name}}}


@producname{explist}@producbody{@bnfrep{exp @bnfter{,}} exp}

@producname{exp}@producbody{
	@Rw{nil}
@Or	@Rw{false}
@Or	@Rw{true}
@Or	@bnfNter{Number}
@Or	@bnfNter{String}
@Or	@bnfter{...}
@Or	function
@OrNL	prefixexp
@Or	tableconstructor
@Or	exp binop exp
@Or	unop exp
}

@producname{prefixexp}@producbody{var @Or functioncall @Or @bnfter{(} exp @bnfter{)}}

@producname{functioncall}@producbody{
	prefixexp args
@Or	prefixexp @bnfter{:} @bnfNter{Name} args
}

@producname{args}@producbody{
	@bnfter{(} @bnfopt{explist} @bnfter{)}
@Or	tableconstructor
@Or	@bnfNter{String}
}

@producname{function}@producbody{@Rw{function} funcbody}

@producname{funcbody}@producbody{@bnfter{(} @bnfopt{parlist} @bnfter{)} block @Rw{end}}

@producname{parlist}@producbody{namelist @bnfopt{@bnfter{,} @bnfter{...}}
  @Or @bnfter{...}}

@producname{tableconstructor}@producbody{@bnfter{@Open} @bnfopt{fieldlist} @bnfter{@Close}}

@producname{fieldlist}@producbody{field @bnfrep{fieldsep field} @bnfopt{fieldsep}}

@producname{field}@producbody{@bnfter{[} exp @bnfter{]} @bnfter{=} exp @Or @bnfNter{Name} @bnfter{=} exp @Or exp}

@producname{fieldsep}@producbody{@bnfter{,} @Or @bnfter{;}}

@producname{binop}@producbody{@bnfter{+} @Or @bnfter{-} @Or @bnfter{*} @Or @bnfter{/}
  @Or @bnfter{^} @Or @bnfter{%} @Or
  @bnfter{..} @OrNL @bnfter{<} @Or @bnfter{<=} @Or @bnfter{>} @Or @bnfter{>=}
  @Or @bnfter{==} @Or @bnfter{~=} @OrNL @Rw{and} @Or @Rw{or}}

@producname{unop}@producbody{@bnfter{-} @Or @Rw{not} @Or @bnfter{#}}

}

}

@C{]===============================================================}

}
